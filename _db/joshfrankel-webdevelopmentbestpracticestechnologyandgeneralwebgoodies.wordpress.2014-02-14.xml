<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.8.1" created="2014-02-14 19:53" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Josh Frankel - Web Development, Best Practices, Technology, and general web goodies</title>
	<link>http://blog.joshmfrankel.com</link>
	<description></description>
	<pubDate>Fri, 14 Feb 2014 19:53:47 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.joshmfrankel.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.joshmfrankel.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>joshmfrankel@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[Josh]]></wp:author_first_name><wp:author_last_name><![CDATA[Frankel]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.8.1</generator>

	<item>
				<title>Firemin: The Firefox memory leak fix</title>
		<link>http://blog.joshmfrankel.com/articles/firemin-the-firefox-memory-leak-fix/</link>
		<pubDate>Fri, 26 Aug 2011 20:41:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://weboso.deviantart.com/art/Firefox-2005-icons-14763352"><img class="alignnone" title="Firemin by weboso" src="http://www.rizonesoft.com/freeware/firemin/firemin-featured.jpg" alt="" width="128" height="128" /></a>

Until recently Firefox has always felt like a double-edged sword to me. The developer's add-ons have always been a pleasure to use. Firebug, ySlow, PageSpeed, Web Developer are all addicting for web design. Unfortunately, my favorite, <a href="http://getfirebug.com/">firebug</a>, has been notorious for turning into a zombie and snacking on my computer's memory (that no amount of Left 4 Dead can solve!). Leave the browser open a couple hours and viola you have a standards compliant browser that runs slower than IE6.

I kept using my favorite browser, upgrading to the beta, hoping, praying for a fix. Every update was the promise of a browser that could run indefinitely without performance decrease. And every update the same problem persisted.

Then I found Firemin. Was it true? Had someone finally fixed the memory issue. I quickly downloaded and ran it. Firefox loaded the same...was it just a another false claim?  Then I checked the task manager and was completely blown away.

<a href="http://www.rizonesoft.com/2011/firemin/">Firemin Homepage</a>
<blockquote>"...let it babysit Firefox. You expected it to be more complicated, we are truly sorry to disappoint you."</blockquote>
The former memory leak riddled browser had been transformed into a sleek, efficient, and completely awesome tool. Running at less than 30mbs of memory on average, the browser still refuses to slow down for me. To the hardworking people of Rizonesoft, thank you. You have made this developer's life and countless others less of a headache.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2011-08-26 14:41:43</wp:post_date>
		<wp:post_date_gmt>2011-08-26 20:41:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firemin-the-firefox-memory-leak-fix</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="browser"><![CDATA[Browser]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Pure CSS: Dynamically numbered elements</title>
		<link>http://blog.joshmfrankel.com/snippets/pure-css-dynamically-numbered-elements/</link>
		<pubDate>Fri, 09 Sep 2011 16:43:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[So this isn't a <mark title="Been around since CSS 2.1">new trick</mark> by any means, but it sure is handy (Think outlines, book chapters, line numbering...) The more markup you can minimize via CSS the better, in my book.
<blockquote title="http://www.w3.org/wiki/CSS/Properties/counter-increment">Counter-increment CSS Property
"The counter-increment property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer indicates by how much the counter is incremented for every occurrence of the element. The default increment is 1. Zero and negative integers are allowed." -W3.org</blockquote>
Fundamentally this property allows web developers to dynamically name html elements per element. I am using this to create line numbers for theme editor app<a href="#">(check out the Themer Project!)</a>
<h3>Background</h3>
The counter-reset property specifies when the counter should be reset. The identifier in this property is just a matter of preference. A lot of examples I have run across use section or chapter. To use this effectively you need to specify a parent element with the counter-reset property and the child element that should be incremented with the counter-increment property.
<h3>Example</h3>
CSS
[css]
body {
counter-reset: section;
}

div:before {
counter-increment: section;
content: counter(section);
}
[/css]

HTML
[html]
&lt;div&gt;Some content goes here&lt;/div&gt;
&lt;div&gt;More content goes here&lt;/div&gt;
&lt;div&gt;Yep, more content&lt;/div&gt;
[/html]

Output
<blockquote>1 <span class="Apple-style-span" style="font-family: georgia, times, serif; font-size: 14px; line-height: 22px; white-space: normal;">Some content goes here</span>

2 <span class="Apple-style-span" style="font-family: georgia, times, serif; font-size: 14px; line-height: 22px; white-space: normal;">More content goes here</span>

<span class="Apple-style-span" style="font-family: georgia, times, serif; font-size: 14px; line-height: 22px; white-space: normal;">3 Yep, more content</span></blockquote>
Check out my fiddle for a demo! <a href="http://jsfiddle.net/joshmfrankel/mbM9Z/7/">Dynamic Numbered CSS</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2011-09-09 10:43:44</wp:post_date>
		<wp:post_date_gmt>2011-09-09 16:43:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pure-css-dynamically-numbered-elements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css-3"><![CDATA[CSS 3]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide OgTags</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide SexyBookmarks</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[pure-css-automatically-number-elements]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[pure-css-dynamically-number-elements]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[css]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Prevent html textarea resizing using css</title>
		<link>http://blog.joshmfrankel.com/snippets/prevent-html-textarea-resizing-using-css/</link>
		<pubDate>Sun, 16 Oct 2011 15:36:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a simple trick I found out by blind luck. I wanted to prevent the textarea tag's default resizing in Chrome and Firefox. As there seems to be no attribute available for the tag such as resize="false" (Come on W3C...) I began looking for an alternative. It's actually quite easy to lock a text area using only CSS.

<pre class="lang:css mark:2-3" title="The Css">
textarea {
width: 250px !important;
height: 200px !important;
}
</pre>

Unfortunately the !important hack is what locks the size of the textarea. I am still looking for valid css method for sizing a textarea. Anyone else got any idea?

Check out my fiddle for a demo! <a href="http://jsfiddle.net/joshmfrankel/aD6uj/">Textarea sample</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2011-10-16 09:36:22</wp:post_date>
		<wp:post_date_gmt>2011-10-16 15:36:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>prevent-html-textarea-resizing-using-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css-3"><![CDATA[CSS 3]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[prevent-textarea-browser-resizing-using-css]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[prevent-textarea-resizing-using-css]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Nancy]]></wp:comment_author>
			<wp:comment_author_email>slimnancy@gmx.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>109.230.216.20</wp:comment_author_IP>
			<wp:comment_date>2011-09-28 20:15:10</wp:comment_date>
			<wp:comment_date_gmt>2011-09-29 02:15:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Much appreciated for the information and share!     
Nancy]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Josh]]></wp:comment_author>
			<wp:comment_author_email>info@joshmfrankel.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.joshmfrankel.com</wp:comment_author_url>
			<wp:comment_author_IP>207.252.173.11</wp:comment_author_IP>
			<wp:comment_date>2011-09-30 09:42:17</wp:comment_date>
			<wp:comment_date_gmt>2011-09-30 15:42:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Nancy.  Glad this helped you out.  Feel free to post a more elegant solution if you find one.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[annedreshfield]]></wp:comment_author>
			<wp:comment_author_email>anne@livefyre.com</wp:comment_author_email>
			<wp:comment_author_url>http://annedreshfield.com/</wp:comment_author_url>
			<wp:comment_author_IP>50.193.40.29</wp:comment_author_IP>
			<wp:comment_date>2012-07-31 21:51:06</wp:comment_date>
			<wp:comment_date_gmt>2012-07-31 21:51:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Josh, welcome to the Livefyre community! Great tip here. Isn't it fun to stumble across something like this by accident? Please feel free to let us know if you have any questions or feedback for us. We'd be happy to help! ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>11 reasons why web development fails</title>
		<link>http://blog.joshmfrankel.com/?p=186</link>
		<pubDate>Thu, 26 Jul 2012 05:28:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<ol>

<li>Project plans are just an inconvenience.</li>

<li>You don't unit test</li>
<hr />
<p>If you are going to focus on learning one item on this list do yourself a favor and LEARN UNIT TESTING!  I can't emphasize enough how useful and powerful a simple unit test can be.  Proper unit testing eases development stress...prevents you from chasing down errors...makes refactoring possible...produces cleaner code...  It literally will make your life easier when developing.</p>
<p>Here is a quick java example using jUnit</p>

[java]
public class MyClass() {
     public int factorial(int value) {
          if(value == 1)
            return 1;
          else
            return(value * (factorial(value-1));
     }
}
[/java]
<p>And its unit test</p>
[java]
@Test
public int testFactorial(int value) {
     MyClass unitTester = new MyClass();
     
     //The Bread and Butter of Unit Testing
     assertEquals(24, unitTester.factorial(4));  //True

     assertEquals(4, unitTester.factorial(4));   //False
}
[/java]

<p>If the test passes then you have the green light for refactoring, otherwise you will get a red error message.  Now this seems like a trivial example but say you were to build upon the factorial example to include additional features.  Having this base unit test in place would ensure that the new features don't break the core logic.  Pretty nifty.</p>

<li>Hey, you!  Quit thinking!  Don't go outside the box.</li>
<hr />
<p>Creative problem solving is by far the best 

<li>It should work for the next 5 years?  Let someone else worry about it.</li>
<hr />
<p>Building an application that will run indefinitely is impossible.  Building an application that will be scalable is <mark title="but preferred">difficult</mark> but possible.  Building an application that will work for the next month is easy.  Unfortunately, when all of your projects are designed to work on short time spans, you WILL end up with a backlog of fixes and updates.  Which WILL cut from new feature development.  And let me tell you maintaining an application that is not designed with a 5 year goal in mind is destined for failure and/or developer burnout.</p>

<li>Comments, what comments?</li>
<hr />
<p>Ever write a particular inspired piece of code, then come back to a couple days later and forget how it even works?  Enter comments</p>

<p>Not writing comments for your code is like cramming for an exam.  At the time you have all the knowledge you need to pass but as soon as the exam is over you purge all of it.  Same thing happens when you write code.  Now when I say comment your code, I mean do it succinctly.  ONLY COMMENT IF THE LOGIC DOES NOT MAKE SENSE INTUITIVELY!  Otherwise you risk bloating your code significantly.</p>

<li>Miscommunication.</li>

<li>Understanding the basic concept is not important</li>

<li>You are naive enough to think there shouldn't be errors.</li>
<p>This one takes not unit testing one step farther.  If you are arrogant enough to think that you produce error free, clean code the first try, you are probably not observant enough to catch the missing semicolon or the sql injection vulnerability, or the file upload exploit, or the development code to drop all tables,  or the cross-site scripting hole...  Get the picture.  There are literally too many things that have to mesh together while developing to think that you won't run into errors.  It also makes you look like a <mark title="Go Healthy Environment, wait...">green</mark> developer when you say it...</p>

<li>Who needs source control?  Just load the app into the server's memory.</li>
<hr />
<p>Git on the bandwagon and do yourself a favor and git some type of version control.  This will save you tons of headache (and anyone else you develop with).  Now I have a couple recommendation but I will let you git the version control of your choice free from my bias...</p>

<li>You don't have or follow a standard</li>

<li></li>

</ol>

<p>So what makes your skin crawl?  Is it the guy next to you explaining how iterative SQL is the best thing since sliced bread?  Or the individual who uses data types to prefix every <mark title="Gotta love Hungarian type notation">strWord</mark>?</p>
<p>What's your programming pet peeve? </p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2012-07-26 05:28:50</wp:post_date>
		<wp:post_date_gmt>2012-07-26 05:28:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>10-reasons-why-web-development-fails</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>6 ways to prepare for a web developer interview</title>
		<link>http://blog.joshmfrankel.com/?p=233</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[Understand the Position
• Research company
• Look up anything you don't know

Portfolio / Resume
• Portfolio website is a must
• Unique resume
• Multiple copies
• Work Examples

Love what you do
• Be enthusiastic
• Be honest (don't oversell; admit if you don't know but explain how you would figure out)
• Be Realistic (pay)
• Be Yourself

Dress Professionally
• Stand out
• Just because the company is in shorts doesn't mean you should also
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2012-08-22 16:11:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>6-ways-to-prepare-for-a-web-developer-interview</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<wp:postmeta>
			<wp:meta_key>Hide SexyBookmarks</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide OgTags</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Sublime Text: One editor to develop them all</title>
		<link>http://blog.joshmfrankel.com/?p=272</link>
		<pubDate>Thu, 26 Jul 2012 05:28:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="aligncenter size-thumbnail wp-image-274" style="border-style: initial; border-color: initial;" title="Nate Beaty's Sublime Text logo redesign" src="http://blog.joshmfrankel.com/wp-content/uploads/2012/02/sublime-text-logo-150x150.png" alt="Nate Beaty's Sublime Text logo redesign http://natebeaty.com/" width="150" height="150" />

... and in the darkness bind them.  Cheesy?  Yes.  Effective?  Maybe.

Let me start this article by first listing some of the best editors out there.  I've only listed editors that I have personally used.  Every ed    Depending on the project and the developer any of these can be powerful development tools.
<ul>
	<li>Wordpad - Simple built-in Windows editor.  One step above notepad</li>
	<li>Dreamweaver - Adobe's ide.  Great for beginners....just don't use the design mode.</li>
	<li>Eclipse - An awesome extendable ide that is best used with Java</li>
	<li>Netbeans - Based off of Eclipse Netbeans is leaner version that is one of my personal favorites for php development</li>
	<li>Notepad++ - An excellent bare bones editor with great features.</li>
	<li>Gedit - Simple, efficient, and has a robust plugin system.  A good substitute for textmate on Linux.</li>
	<li>CloudIDE - Great cloud based editor (hence the name)</li>
</ul>
<div>Though often what I find is the simplest solution is the best.  Sublime Text 2 fills this category perfectly.</div>
<div></div>
<div>It has a clean interface, is lighting fast, and works with you, not against you.  Upon first load up the user settings are a little  different than most ide's as they are stored JSON style files.  This is a great paradigm shift as most editor's still employ the endless preference and setting menus.  With this shift also comes easier portability in the settings files.</div>
<div></div>
<div>Additionally, SF2 supports a robust package system courtesy of [insert github link].  This makes installing new packages a snap.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2012-07-26 05:28:51</wp:post_date>
		<wp:post_date_gmt>2012-07-26 05:28:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[274]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Why is Modernizr.load broken for the development version</title>
		<link>http://blog.joshmfrankel.com/articles/why-is-modernizr-load-broken-for-the-development-version/</link>
		<pubDate>Fri, 24 Aug 2012 03:59:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=330</guid>
		<description></description>
		<content:encoded><![CDATA[The current development version of Modernizr does not contain the yepnope.js bundle.  This is somewhat tricky as there is no error message or notification except in the console debugger.

<pre class="lang:js" title="Console output">
Uncaught TypeError: Object #<Object> has no method 'load'
</pre>

Luckily, there is an easy fix for this.  Just download the production version and make sure to mark the checkbox called Modernizr.load(yepnope).  Fixed!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date>2012-08-23 21:59:25</wp:post_date>
		<wp:post_date_gmt>2012-08-24 03:59:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-is-modernizr-load-broken-for-the-development-version</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide SexyBookmarks</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide OgTags</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[modernizr-load-broken-for-development-version]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>5 Methods to style a double line border using only CSS</title>
		<link>http://blog.joshmfrankel.com/articles/5-methods-to-style-a-double-line-border-using-only-css/</link>
		<pubDate>Wed, 28 Nov 2012 22:28:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=355</guid>
		<description></description>
		<content:encoded><![CDATA[Double line letterpress-esque borders are all the rage right now in web development. And why not? They look clean and provide some depth to your site.  So lets dive right in with a few of my favorite techniques for achieving this effect.

<h3>Horizontal rule with a border</h3>
The first method of building a double border relies on the use of the hr tag. By setting the background color and height, you can change the color of the hr tag. Combine this with adding a border-bottom and you have yourself a double line border. One problem with this approach is that the background color comes after the border-bottom.
<pre class="lang:css decode:true">.doubleBorder hr{
	background-color: #d6d6c6;
	border-bottom: 1px solid #e9e9e1;
	position: inherit;
	height: 1px;
}</pre>
<blockquote>
<strong>Pros: </strong>Uses semantic html element
<strong>Cons: </strong>The border order is confusing, horizontal rule must have a height
</blockquote>
<h3>The Border / Outline double border</h3>
<p>This is by far the easiest method to use. It doesn't require any bizarre css or html and utilizes css properties properly by their function. Something to keep in mind is that the border property directly surrounds the element, while the outline property will always surround the outside of the element. Because of this the outline property will add extra width and height to the element. Making it larger than you would normally assume. </p><p>Unfortunately, outline is not as customizable as border; an outline must always be on all sides of an element while the border can be set to a specific side.</p>
<pre class="lang:css decode:true">.doubleBorder {
        border: 1px solid #e9e9e1;
        outline: 1px solid #e9e9e1;
}</pre>
<blockquote><strong>Pros: </strong>Easiest method to implement!
<strong>Cons: </strong>The outline property always surrounds element on all sides with a border, Outline adds additional width and height.</blockquote>
<h3>The Border / Drop-Shadow border</h3>
This method is very similar to the outline / border method except we use the new CSS3 box-shadow property. Box-Shadow differs from outline because it can accommodate particular sides of the element having a border. Unfortunately, despite being all rad CSS3, box-shadow is not supported in every available browser. So if you need to make this work in IE 8 or less then you should use a different method.

<strong>Tip: </strong>If you want all the sides of an element to have a box shadow increase the spread (fourth pixel value) while leaving vertical and horizontal offsets at zero. This will essentially push the shadow out in all directions.
<pre class="lang:css decode:true">.doubleBorder {
        border: 1px solid #e9e9e1;
        -webkit-box-shadow:  0px 0px 0px 1px rgba(0, 0, 0, 1);
        box-shadow:  0px 0px 0px 1px rgba(0, 0, 0, 1);
}</pre>
<blockquote><strong>Pros: </strong>CSS3 is rad!, Allows for a variety of design
<strong>Cons:</strong> Requires a CSS3 compatible browser (sorry no IE less than 9), Can be tricky to apply to multiple sides of an element</blockquote>
<h3>The ::after pseudo border</h3>
<p>This is probably one of my favorite techniques even if it isn't the most elegant.  The trick to this method is that there are two css rules.  One for the initial element (.doubleBorder) and one for the pseudo element ::after. </p>
<p>::after seems like it should do exactly what it says (style any element that occurs directly after the initial selector).  However for this to work properly there needs to be content to style which is where the content property comes in.  By setting this to a blank value you trick the browser into thinking there is data present which allows you to style the initial tag separately.  In addition to the content property, setting display:block and the height value will render the border.</p>
<pre class="lang:css decode:true">.doubleBorder {
        border-bottom: 1px solid #FAFAFA;
}
.doubleBorder::after {
        content: "";
        display: block;
        height: 1px;
        background: #C1C1BF;
}</pre>
<blockquote><strong>Pros: </strong> Cool technique that allows for a wide variety of features, Has good browser support
<strong>Cons: </strong> Requires more css properties than other methods, Requires blank css property</blockquote>
<h3>The background-image border</h3>
<p>Ok, ok.  I know what your are thinking.  But this is supposed to only be CSS solutions, right?  Well this last method does use an image to create a border but the real magic happens by using the css repeat-x value in the background attribute.  This allows the image to repeat itself in a horizontal orientation.  The final image that is in use only needs to be 1px wide to render correctly using this method.</p>
<p>I find that if I am struggling with a particularly difficult design that this method will cover most (if not all) border designs</p>
<pre class="lang:css decode:true">.doubleBorder {
        background: url(../images/layout/doubleBorder.png) 0 0 repeat-x;
        display: block;
        height: 2px;
}</pre>
<blockquote><strong>Pros: </strong>Versatile and useful for difficult designs, Often saves time over other methods
<strong>Cons: </strong> Requires an image :-(</blockquote>
<p>So there you have it, 5 methods for creating a double border.  Have a method not listed here?  Let me know in the comments.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date>2012-11-28 16:28:28</wp:post_date>
		<wp:post_date_gmt>2012-11-28 22:28:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5-methods-to-style-a-double-line-border-using-only-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="css-3"><![CDATA[CSS 3]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide OgTags</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide SexyBookmarks</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Create a jQuery Twitter plugin from scratch</title>
		<link>http://blog.joshmfrankel.com/tutorials/create-a-jquery-twitter-plugin-from-scratch/</link>
		<pubDate>Thu, 13 Dec 2012 04:17:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=386</guid>
		<description></description>
		<content:encoded><![CDATA[Over the next couple posts in this series I will walk you through building your very own Twitter jQuery plugin from scratch. By the end of this series you will better understand the structure of a jQuery plugin, regular expressions, jQuery optimization, datetime manipulation, and jQuery chaining. Additionally, you will have a working plugin which will grab tweets directly from the twitter api. This is a solution based off something that I have used on a number of sites.

Alright so first we need to build the file structure for our project. I like keeping my work space clean so here is the directory structure I am using with the starting point for index.html.

<a href="http://blog.joshmfrankel.com/wp-content/uploads/2012/11/IntroductionHowToBuildAJQueryPluginFromScratch-4.png"><img class="alignnone size-full wp-image-444" title="Introduction HowToBuildAJQueryPluginFromScratch Diagram" alt="" src="http://blog.joshmfrankel.com/wp-content/uploads/2012/11/IntroductionHowToBuildAJQueryPluginFromScratch-4.png" width="476" height="206" /></a>

First you should download the latest version of <a href="http://jquery.com/">jQuery</a> and place it into the jquery.js file. You should also create style.css and jquery.tweet.js. Index.html is where we will output our tweet listing, style.css is the layout code, and jquery.tweet.js is our plugin.
<pre class="lang:default decode:true" title="Index.html">&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;&lt;/title&gt;
	&lt;link rel="stylesheet" type="text/css" href="css/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;

	&lt;!-- CONTENT GOES HERE --&gt;
	&lt;div id="tweets"&gt;&lt;/div&gt;

	&lt;!-- jQuery code goes at the bottom of the page --&gt;
	&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="js/jquery.tweet.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript"&gt;

	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
Now we are ready to start fleshing out the basic plugin structure. Our plugin name will be called Tweet. So lets add our jQuery document ready block and our plugin call.
<pre class="lang:js decode:true" title="Add to the end of index.html">&lt;script type="text/javascript"&gt;
		$(document).ready(function(){

			$('#tweets').tweet();

		});
	&lt;/script&gt;</pre>
This will allow our plugin to be attached onto the id selector tweets from index.html and will come in handy later on.
<h3>Best Practices</h3>
There are a few best practices to keep in mind when creating a new plugin.
<ul>
	<li>The plugin name must not interfere with any existing method names</li>
	<li>The plugin should allow for jQuery chaining (this is THE most powerful aspect of jQuery, so lets try not to break it)</li>
	<li>It should be highly flexible and allow the user to override default settings</li>
</ul>
I have listed the basic plugin structure below with comments. This will cover the first two best practices.
<pre class="lang:js decode:true" title="jquery.tweet.js">// Wrap the plugin in the jquery dollar sign
// This will prevent overriding other methods with 
// the same name as the plugin
// Additionally we can use $ to reference jquery
(function($){

	// Map the plugin name as a function in jQuery
	$.fn.tweet = function() {

		// Allow chaining by returning the this keyword
		return this.each(function() {

                     // Output a console message to show the plugin
                     // is working
                     console.log('We have called the tweet plugin');
		});

	};

})(jQuery);</pre>
At this point we technically have a functional, albeit very basic,  jQuery plugin. This will serve as an excellent starting point for future plugin development.

If you notice I included a console.log(); call which sends data to the browser console.  In Chrome under developer tools it is the last tab and is super helpful for javascript development.  You can output variables, arrays, and even objects in this manner.

Something you might have seen in another jQuery solution is caching of the this keyword. This provides faster processing as you don't need to re-query to dom using jquery since it already exists in memory.
<pre class="lang:js decode:true" title="A simple cache example">var $this = $(this);</pre>
<blockquote>One thing to note is that this is not necessary inside a jQuery plugin<ins datetime="2013-01-31T22:05:56+00:00">,but is necessary within the return this.each(function() since we are now in the plugin's immediate scope</ins>. This is because the plugin is already wrapped in the jQuery object and therefore when you call the keyword this it is already equal to $(this).</blockquote>
The final element I would like to cover before we start on the meat of the plugin, is including support for default and user overridden settings.
<h3>Default and User Settings</h3>
Nearly every single plugin has a way for the user to manipulate its settings.  Its a great way to provide flexibility and control to users so why not. This will be important later on for determining how many tweets we want to grab and what twitter username we grab from. More simply it will allow us not to hard-code data into our plugin.

To implement default and user settings we first need to include a parameter in the original plugin's mapping.  Next we create an array called defaults which will hold the basic values for our plugin.  Finally using a little jQuery magic we merge our parameter array (options) into our default array with the $.extend method.
<pre class="wrap:true lang:js decode:true" title="jquery.tweet.js">// Map the plugin name as a function in jQuery
// Pass in the options parameter for overriding defaults
$.fn.tweet = function(options) {

	// Set the default plugin values
	var defaults = {
		username: 'the base username',
		count: 5
	};

	// Use the jQuery method extend to merge
	// the defaults and options arrays
	var options = $.extend({}, defaults, options);</pre>
This will allow the user to change configuration settings by passing in key / value pairs. Try this out by adding console.log(options); where the previous console message was. You should see the output as 5. This is our default value which was merged into the options array.

Now the real power comes in on index.html where we called our plugin on the id selector. Lets add the following user setting to our plugin call and check the console again.
<pre class="lang:default decode:true" title="index.html">&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;&lt;/title&gt;
	&lt;link rel="stylesheet" type="text/css" href="css/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;

	&lt;!-- CONTENT GOES HERE --&gt;
	&lt;div id="tweets"&gt;&lt;/div&gt;

	&lt;!-- jQuery code goes at the bottom of the page --&gt;
	&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="js/jquery.tweet.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript"&gt;
		$(document).ready(function(){

			$('#tweets').tweet({
				count: 10
			});

		});
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
Your output should look like the following: Object {username: "the base username", count: 10}.  Our default value for the username is listed with our user overridden count value.  Pretty slick.

So that's it for the basic plugin development. In the next post I will cover the twitter api, regular expressions, and date manipulation.  Continue to next lesson (Coming Soon)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>386</wp:post_id>
		<wp:post_date>2012-12-12 22:17:28</wp:post_date>
		<wp:post_date_gmt>2012-12-13 04:17:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>create-a-jquery-twitter-plugin-from-scratch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="series" nicename="how-to-create-a-jquery-twitter-plugin-from-scratch"><![CDATA[How to create a jQuery twitter plugin from scratch]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_series_part</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Twitter API, Regular Expressions, and Date Manipulation</title>
		<link>http://blog.joshmfrankel.com/?p=456</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=456</guid>
		<description></description>
		<content:encoded><![CDATA[So immediately I would like to correct an inaccuracy in part 1. Cacheing $(this) is appropriate to do and considered best practice within the chaining block. Lets go ahead and update our jquery.tweet.js file.
<pre class="lang:js decode:true" title="What your plugin file should look like">// Wrap the plugin in the jquery dollar sign
// This will prevent overriding other methods with the same name as the plugin
// Additionally we can use $ to reference jquery
(function($){

	// Map the plugin name as a function in jQuery
	$.fn.tweet = function(options) {

		// Set the default plugin values
		var defaults = {
			username: 'the base username',
			count: 5
		};

		// Use the jQuery method extend to merge
		// the defaults and options arrays
		var options = $.extend({}, defaults, options);

		// Allow chaining by returning the this keyword
		return this.each(function() {

			// Cache the jQuery keyword
			var $this = $(this);

		});

	};

})(jQuery);</pre>
Now that we got that out of the way, we have a cached jquery object that we can use again and again.

Format the Tweet
CSS3 Transitions
Conclusion

function getDateDifference(startDate, endDate) {

diff = startDate.getTime() - endDate.getTime();

seconds = diff / 1000;

if (seconds &gt;= 60){

minutes = seconds / 60;

if (minutes &gt;= 60) {
hours = minutes / 60;

if (hours &gt;= 24) {
days = Math.floor(hours / 24);

display = (days &gt; 1) ? days + ' days ago' : 'about a day ago';

return display;
}

hours = Math.floor(hours);

display = (hours &gt; 1) ? hours + ' hours ago' : 'about an hour ago';

return display;
}

minutes = Math.floor(minutes);

display = (minutes &gt; 1) ? minutes + ' minutes ago' : 'about a minute ago';

return display;
}

return 'Just now';

}

function formatTweet(text) {

var tweet = '';

var linkRegex = /(((https?:\/\/)|(www1?))\S+)/;
var hashRegex = /(\#{1}(\w+))/;
var atRegex = /(\@{1}(\w+))/;

tweet = text
.replace(linkRegex, '<a href="$1">$1</a>')
.replace(hashRegex, '<a href="https://twitter.com/search/%23$2">$1</a>')
.replace(atRegex, '<a href="https://twitter.com/$2">$1</a>');

return tweet;
}

// set your twitter id
var user = 'RCrusoeandSon';
var count = 2;

$.getJSON("http://api.twitter.com/1/statuses/user_timeline/" + user + ".json?count=" + count + "&amp;include_rts=1&amp;callback=?", function(data) {

var link = '';
var output = '';
var date = '';
var now = new Date();
var regex = /(((https?:\/\/)|(www1?))\S+)/;
var content;

$.each(data, function(key, value) {

// Build the status link
link = 'https://twitter.com/' + user + '/status/' + data[key].id_str;
date = new Date(data[key].created_at);

// Get the difference
difference = getDateDifference(now, date);

// Look for links and format
content = formatTweet(data[key].text);

output += '

' + content + '

';
output += '

<a href="' + link + '">' + difference + '</a>

';

});

$("#tweets").html(output);
});]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date>2013-03-08 18:08:54</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="series" nicename="how-to-create-a-jquery-twitter-plugin-from-scratch"><![CDATA[How to create a jQuery twitter plugin from scratch]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_series_part</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Interfaces vs Abstract Classes: Whats the difference?</title>
		<link>http://blog.joshmfrankel.com/?p=492</link>
		<pubDate>Thu, 13 Dec 2012 22:35:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=492</guid>
		<description></description>
		<content:encoded><![CDATA[Quick OOP description

What is an interface?
definition
explanation
example
What is an abstract class?
definition
explanation
example

Differences Summed up

When you should use each (3 column table)

Conclusion


<h3>Abstract Class</h3>
<ul>
<li>Is extended by child class</li>
<li>Child Class can extend only 1 abstract class</li>
<li>Can contain functional code as well as contract code</li>
</ul>
<h3>Interface</h3>
<ul><li>Can be implemented by child class</li>
<li>Child class can implement multiple interfaces</li>
<li>Only contains contract code</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date>2012-12-13 22:35:52</wp:post_date>
		<wp:post_date_gmt>2012-12-13 22:35:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="inheritance"><![CDATA[inheritance]]></category>
		<category domain="post_tag" nicename="object-oriented-programming"><![CDATA[object oriented programming]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Php autoloading</title>
		<link>http://blog.joshmfrankel.com/?p=497</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=497</guid>
		<description></description>
		<content:encoded><![CDATA[spl_register autoload > __autoload]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>497</wp:post_id>
		<wp:post_date>2012-12-10 22:38:35</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>What is Object Oriented Programming?</title>
		<link>http://blog.joshmfrankel.com/articles/what-is-object-oriented-programming/</link>
		<pubDate>Mon, 14 Jan 2013 14:46:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=530</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>"Object-oriented programming (OOP) is a programming paradigm that represents concepts as "objects" that have data fields(attributes that describe the object) and associated procedures known as methods. Objects, which are instances of classes, are used to interact with one another to design applications and computer programs." <a href="http://en.wikipedia.org/wiki/Object-oriented_programming"> -Wikipedia</a></blockquote>
Phew... that was a mouthful. Here is how I would define Object Oriented Programming; A programming pattern that allows specific chunks of functionality (objects) to interact with each other through the use of class functions (methods) and store class specific data (properties).

When I first started learning about OOP the sheer amount of knowledge and abstractness of the subject was overwhelming to say the least. There is an entire different set of terminology and language to learn while trying to understand the basic theory.

<strong>Some Quick Terminology</strong>
<ul>
	<li>Object - <em>Defined within a class file. The basic building block for oop</em></li>
	<li>Method - <em>A class specific function; contains necessary functionality</em></li>
	<li>Property - <em>A class specific variable</em></li>
	<li>Parameter - <em>The variable passed in the method declaration</em></li>
</ul>
As I am a kinesthetic learner I find the best way to learn something is to practice it. So lets walk through an example of OOP using a real world system. The following code examples are written in php but the concepts can be used regardless of language.
<h3>A Car is Object Oriented</h3>
Think about the following statement, "A car is an object oriented system". What this means is that you can think of a car as a physical object in space. The object accomplishes a specific purpose and has attributes that are specific to it. Learning object oriented programming in the context of a real-world system is also easier to understand than trying to use an abstract programming example. So from now on whenever I say Car think object.
<pre class="lang:php decode:true" title="A super basic class">&lt;?php

class Car {

} 
?&gt;</pre>
<h3>A Car has Specifications</h3>
There are about a million different specifications associated with a car. These are based on the type of car, year, and model. If we look at two cars of the same type, year, and model they should... theoretically... be identical.

For our representation of the Car object lets create the following properties: manufacturer, weight, turned on status, and the current speed.
<pre class="lang:php decode:true" title="Class properties">&lt;?php

class Car {

     private $manufacturer = 'Honda';
     private $weight = 2300;
     private $isTurnedOn = FALSE;
     private $speed = 0;

}

// A variable outside the class holding the Car Object
$Car = new Car();

?&gt;</pre>
<h3>A Car Performs Specific Functions</h3>
Cars perform many different methods of function. We will limit ours to the following: Brake, Accelerate, and Start Ignition. What we have just done is provided the structure for our object. We now know exactly the amount of functionality needed and even the names for the methods we will use. Planning out the design of an Object Oriented system from the beginning is important to help keep code efficient and <a title="Don't Repeat Yourself" href="#">DRY</a>.
<pre class="lang:php decode:true" title="Class methods">&lt;?php

class Car {

     private $manufacturer = 'Honda';
     private $weight = 2300;
     private $isTurnedOn = FALSE;
     private $speed = 0;

     public function brake ($value) {

     }

     public function accelerate ($value) {

     }

     public function startIgnition () {

     }

}

// A variable outside the class holding the Car Object
$Car = new Car();

?&gt;</pre>
<blockquote><strong>Conceptualize:</strong> A method such as Repair Car Engine would not be suited for our Car Object. A car would not repair itself. This would be performed by a Mechanic (a potential other object).</blockquote>
<h3>Visibility and Encapsulation</h3>
You may have noticed the word "public" before the methods. This is what is known as visibility. Visibility refers to how accessible a method or property is to other classes. This is necessary for understanding proper encapsulation.

There are three types of visibility. Public, Protected, and Private. A <strong>public</strong> method/property is accessible to the class it originates inside, any child class that extends it, as well as other classes. A <strong>protected</strong> method/property is visible to only the class where it originates and child classes. A <strong>private</strong> method/property is visible to only the class it originates in.
<blockquote><strong>Best Practice:</strong> When trying to decide visibility for methods and properties you should provide only the bare minimum necessary to execute.</blockquote>
Encapsulation is the idea of hiding the implementation of your class and exposing its functionality in a limited way. This prevents overriding of functionality and reduces duplicate code.

In order to properly encapsulate our class we need to set the visibility for each of our properties and methods. Lucky for you it has already been done. Our methods were all listed as public and our properties were labeled private. The properties now are only accessible to the class Car. A common design pattern is to create helper methods called getters and setters.
<h3>Getters and Setters</h3>
This is actually a fairly straight forward concept. They literally do exactly what they say and nothing more. A getter method returns a property while a setter method sets it. These allow other methods to access the Car objects private variable for manufacturer.
<pre class="lang:php decode:true" title="Getters and Setters">     /**
      * Getter for Manufacturer
     **/
     public function getManufacturer () {
          return $this-&gt;manufacturer;
     }

     /**
      * Setter for Manufacturer
     **/
     public function setManufacturer ($value) {
          $this-&gt;manufacturer = $value;
     }</pre>
I have introduced a new keyword called $this. $this refers to the current class it is within so in this instance $this will include all the methods and properties for the Car class. By calling $this-&gt;manufacturer inside getManufacturer we return the private variable manufacturer. This will help to differentiate between variables defined within a method (local variables) and a class properties (public, protected, private).
<blockquote><strong>Quick Note: </strong>When calling a property using $this you do not use a second dollar sign. $this-&gt;$manufacturer will generate an error.</blockquote>
We can now set and get the car's properties on the fly. Getters and Setters may seem tedious and unnecessary (and they sometimes are in smaller applications) but they should help you to provide access points for other classes while forcing you to organize your code. Here's a quick simple example.
<pre class="lang:php decode:true">$Car = new Car();

$manufacturer = $Car-&gt;getManufacturer();

// Outputs Honda, the default value
echo $manufacturer;

$Car-&gt;setManufacturer('Acura');

$manufacturer = $Car-&gt;getManufacturer();

// Outputs Acura
echo $manufacturer;</pre>
<h3>Gentleman, Start Your Engines</h3>
Now that we have some of the basics completed, lets move onto some actual functionality. First lets flesh out the startIgnition method. This method will check the isTurnedOn property to see if it is false (turned off) and if so will change it to True.
<pre class="lang:php decode:true" title="Getters and Setters">     public function startIgnition () {

          // Check to see if the car is already turned on
          if (!$this-&gt;isTurnedOn) {

               // If the car is off lets turn it on
               $this-&gt;isTurnedOn = TRUE;
          }

     }</pre>
The isTurnedOn property now can be checked before running other methods. We can use this to perform a sanity check on the turned on state of the car. A car wouldn't be able to accelerate or brake if is isn't turned on, right?
<pre class="lang:php decode:true" title="Getters and Setters">     public function accelerate ($value) {

          // Check to see if the car is already turned on
          if ($this-&gt;isTurnedOn) {

               // If the car is turned on then add the parameter value
               // from the private speed variable.
               // We are increasing in speed.
               $this-&gt;speed += $value;
          }

     }

     public function brake ($value) {

          // Check to see if the car is already turned on
          if ($this-&gt;isTurnedOn) {

               // If the car is turned on then subtract the parameter value
               // from the private speed variable.
               // We are decreasing in speed.
               $this-&gt;speed -= $value;
          }

     }</pre>
Our accelerate and brake methods now will only run if the car is already turned on. This is the expected result. Both methods can have lots of functionality added to them. I'll leave these up to you but here are some questions to get you thinking.
<ul>
	<li>Can the car brake and decelerate if the car's speed is already at zero?</li>
	<li>Is there a top speed or limit to how fast the car can travel?</li>
	<li>Does a car take time to accelerate or brake</li>
</ul>
<h3>88 MPH</h3>
The last piece of our Car class will be to output some information that the user can utilize. This will include a new getter method for the car's speed and an output method to display a string that is user readable.
<pre class="lang:php decode:true" title="Getters and Setters">     public function getSpeed ($value) {
          // Get the current speed
          return $this-&gt;speed;
     }

     public function outputCurrentSpeed () {

          // Set the local variable (output) to equal a string 
          // that contains the returned result from the getSpeed method.
          $output = 'You are traveling at ' . $this-&gt;getSpeed() . ' mph';

          return $output;
     }</pre>
Again by using the $this keyword we refer to the current object. Because the object is a Car object we can access the newly created getSpeed method to return the speed of the car. As displayed above this is concatenated into a string for output. With the functionality of our class completed we can now try it out and see it in action.
<pre class="lang:php decode:true">$Car = new Car();

// Start the Car
$Car-&gt;startIgnition();

// Accelerate to 88 mph
$Car-&gt;accelerate(88);

// This will output "You are traveling at 88 mph"
echo $Car-&gt;outputCurrentSpeed();

// Lets stop the car
$Car-&gt;brake(88);

// This will output "You are traveling at 0 mph"
echo $Car-&gt;outputCurrentSpeed();</pre>
<h3>Summary</h3>
There you have it. A working OOP class structure. Feel free to build upon this or add other methods.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>530</wp:post_id>
		<wp:post_date>2013-01-14 08:46:36</wp:post_date>
		<wp:post_date_gmt>2013-01-14 14:46:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-object-oriented-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="object-oriented-programming"><![CDATA[object oriented programming]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[What is Object Oriented Programming? #OOP #php #encapsulation #visibility http://wp.me/p2Drah-8y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Responsive Browser Testing with Adobe Edge Inspect</title>
		<link>http://blog.joshmfrankel.com/articles/responsive-browser-testing-with-adobe-edge-inspect/</link>
		<pubDate>Thu, 17 Jan 2013 15:00:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=566</guid>
		<description></description>
		<content:encoded><![CDATA[Testing for mobile devices can be a royal pain in the butt. There are so many different device facets to keep in mind. There are about twenty different brands, a near endless supply of device resolutions, and newer features like retina display that require addtional testing.  Now with the surge of popularity of responsive web design, we now have one more thing to test.  Ready to pull your hair out yet?

Fortunately, a new time saving way of testing both desktop and mobile devices simultaneously is available. Previously known as Shadow, Adobe has renamed it Edge Inspect.

<blockquote>"Adobe Edge Inspect - Preview &amp; inspect web designs on devices" - <strong>Adobe.com</strong></blockquote>

Edge Inspect gives developers a much needed way of synchronizing multiple devices in order to test the same webpage. By installing the app and connecting your mobile devices to a wifi network you can control the page of any connected device directly from your browser.

As an added bonus you can also use your browser's developer tools to remotely change a device's html, css, or javascript. No more device specific bugs that are impossible to fix, you can now debug a website without even leaving your browser.  This is awesome for time saving and process automation.

Edge inspect makes this process so easy. So what are you waiting for? <a href="http://html.adobe.com/edge/inspect/">Install it already!</a>

Edge Inspect allows you to connect one additional device to your desktop with the free version or infinite devices with the paid version. I have had no problem just using the free version for the time being.

Look out for a new blog post in the coming weeks regarding the perfect setup for testing a responsive website.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>566</wp:post_id>
		<wp:post_date>2013-01-17 09:00:58</wp:post_date>
		<wp:post_date_gmt>2013-01-17 15:00:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>responsive-browser-testing-with-adobe-edge-inspect</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="responsive-web-design"><![CDATA[Responsive Web Design]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[Responsive Browser Testing with Adobe Edge Inspect. #responsive http://wp.me/p2Drah-98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Should I use px or ems for css font-size? Neither, use rem!</title>
		<link>http://blog.joshmfrankel.com/articles/should-i-use-px-or-ems-for-css-font-size-neither-use-rem/</link>
		<pubDate>Wed, 30 Jan 2013 15:00:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=571</guid>
		<description></description>
		<content:encoded><![CDATA[While setting the size of a font is relatively simple; choosing the unit of measuring the size can become complex quickly.

At their core there are two types of font-size units; relative and absolute. Relative units are calculated by their parent element's font-size while absolute units are set at a fixed value. Both types of units are useful.

I often will use both px and em for font-size but recently in CSS3 development there has been a new unit. This unit is called <a href="#rem">rem</a> or root em unit and allows for far greater flexibility with typography.
<h3>Units for Special Cases</h3>
..Unless you have a good reason for using these, there are far more efficient and easy to understand units.
<h4>%</h4>
Percentage is a relative unit and works exactly how you would think. The unit sizes a font based on its parent's font size. So if the parent is 100% and the child is 25% the child element is 25% of its parent's 100%.

One area for using a percentage is to style a top level html element like body or html to allow units like em to have easier size calculations. This will set the top level parent element so that converting an em to pixel is as easy as moving the decimal point.
<pre class="lang:css decode:true">html {

    /* ems now are base ten so 1.4em = 14px */
    font-size: 62.5%;
}</pre>
<h4>pt</h4>
The pt or Point unit is something you have probably seen before in your favorite word processing application. A pt unit refers to physical space on a sheet of paper and is therefore an absolute unit. Because of this they should only ever be used with printer friendly stylesheets.
<h3>Units to Avoid like the Plague</h3>
<h4>Keyword</h4>
I really dislike this unit of measure and generally try to avoid it. Although using a keyword font size ensures that there will be no scaling due to it being a unit of absolute size; they provide little to no fine tuning. This is because there are only 6 different keywords. They range from xx-small to medium and back up to xx-large. Lets move on to something more useful.
<h3>Units that are Useful</h3>
<h4>px</h4>
Pixels are the by far the most accurate and easiest to understand unit of measurement. By setting a font-size in px you are literally instructing the browser to render the font at that exact pixel height. The font will never have a height greater than the pixel value set. This is my bread-and-butter unit.  When you need exact measurements go with px.
<h4>em</h4>
According to w3.org an em unit is measured by, "the computed font size of the parent element". So what does this mean for us? It means that the em unit is dependent upon it's parent's font-size and is also another relative unit of measure.

Since it is dependent upon the parent element the em has a potential to become compounded.  This can lead to some unexpected results. An example of this is if the parent has a font-size of 4em and the child has a font-size of 2em. In actuality the child element will have a font-size of 8em.

To calculate the size of an em you take the parent and multiply it by the child. However, keep in mind that if we have additional parents that they must be calculated as well. This can make em units somewhat difficult to keep track of as the font size can compound quickly.
<h3 id="rem">A Real Unit of Measure</h3>
<h4>rem</h4>
The rem unit or root em is such a sublime solution to the problem of font sizing. The root element of a page is always the html tag. So by defining a % (yes, this would be a good place to use this method) on the html element, you now have control over every single element using the rem unit.

Back to the previous code example.
<pre class="lang:css decode:true">html {

    /* rems now are base ten so 1.4em = 14px */
    font-size: 62.5%;
}

h1 {
     font-size: 2.8rem;
}</pre>
By using this we can now set an h1 tag to 2.8rem and it will render as if it is 28px.
<h3>Flexible Typography</h3>
If we are by chance using media queries it is possible to utilize them to typography that will scales with the page size. This is accomplished by redeclaring the font-size percentage for the html element inside a media query. Now all we have to do is change 1 value to affect all font-sizes on multiple devices. This is getting pretty handy now.

<pre class="lang:css decode:true " title="Flexible Typography.  This rules!" >@media only screen and (min-width: 1140px) {

	/**
	 * Set the Base Font Size
	 */
	html {
		font-size: 90%;
	}
}</pre>

As with any new unit there is a catch which is browser support. Fortunately all modern browsers support the rem unit. For older non-compliant browsers by using a font-size with a pixel measurement directly before the rem value allows us to specify a default value.
<pre class="lang:css decode:true">h1 {
    /* The default value if rem units aren't supported */
    font-size: 20px;

    /* Our fancy new rem unit */
    font-size: 2rem;
}</pre>
So there you have it a new unit of measuring font-size and a method for creating flexible typography.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>571</wp:post_id>
		<wp:post_date>2013-01-30 09:00:01</wp:post_date>
		<wp:post_date_gmt>2013-01-30 15:00:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>should-i-use-px-or-ems-for-css-font-size-neither-use-rem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="post_tag" nicename="css-3"><![CDATA[CSS 3]]></category>
		<category domain="post_tag" nicename="flexible-typography"><![CDATA[Flexible Typography]]></category>
		<category domain="post_tag" nicename="responsive-web-design"><![CDATA[Responsive Web Design]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[Should I use #px or #ems for #css font-size? Neither, use #Rem! http://wp.me/p2Drah-9d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>How to install Linux Mint</title>
		<link>http://blog.joshmfrankel.com/?p=647</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=647</guid>
		<description></description>
		<content:encoded><![CDATA[As a web developer coming from a background of using the Windows OS, I noticed that terminal is used frequently for setting up code environments (Ruby on Rails) and running apps such as LiveReload. While their are Windows alternatives, they require a specific setup to work from command line and this just felt like a smelly workaround. While Mac OSX has this built-in, I didn't really want to drop two grand on an apple product when using Linux would accomplish the same functionality at the low price of free.

So I tried out a couple different Linux distros and determined which ones would suite my process the best. The two I liked the most were Ubuntu and Linux Mint (haven't tried ArchLinux but lots of people swear by it). After much debate between the two (technically Linux Mint is based directly off Ubuntu) I decided that Linux Mint was more efficient.

I spent a couple weeks trying to create a perfect linux environment. After many failures, I recorded the process step-by-step. So let's start with what you need.
<h3>What you Need</h3>
<ol>
	<li>A Flash drive with at least a 1GB capacity</li>
	<li>A Laptop</li>
	<li>*** ONLY FOR OPTIMUS VIDEO CARDS *** A Mini DisplayPort to HDMI converting adapter (more on this later)</li>
</ol>
This guide is written for a Dell XPS 15 L502X with a Nvidia 525M discrete video card with Optimus Technology. It is important to note that the brand of laptop and its hardware directly effect how to setup specific features in linux however, this guide should work for most devices. An issue that will be addressed later are laptops with an integrated video card and an Nvidia Optimus video card in them.
<blockquote><strong>Quick Note: </strong>Nvidia created a technology referred to as Optimus that switches between the integrated card and the discrete card on the fly. This allows for lower power consumption and when needed extra performance. However, Optimus cards are not supported out of the box on Linux.</blockquote>
<h3>Create a Bootable USB Installer</h3>
The first step is to download the Linux Mint 13 DVD ISO Cinnamon edition. You can do this directly from the <a href="http://www.linuxmint.com/release.php?id=18">Linux Mint 13 Downloads</a>.  Make sure you choose Cinnamon (64-bit) and not any of the others. don't get the ones saying "no-codecs"

While we are waiting on the download to complete lets grab an excellent little program called <a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/">USB Universal Installer</a>. This will help us to create a bootable Linux Mint disc on a flash drive.
<div class="step-by-step" id="usb-universal-installer">
<div class="step-single">

1. Choose the distro of linux you wish to install

[caption id="attachment_681" align="alignnone" width="511"]<a href="http://blog.joshmfrankel.com/wp-content/uploads/2013/02/universal-usb-step1.png"><img class="size-full wp-image-681" alt="Universal USB Step 1" src="http://blog.joshmfrankel.com/wp-content/uploads/2013/02/universal-usb-step1.png" width="511" height="537" /></a> Universal USB Step 1[/caption]

</div>
<div class="step-single">

2. Select the iso location and install to usb

3. Get yourself a beer, while we wait.

</div>
</div>
<h3>Install Linux Mint</h3>
So first plug the newly created usb installer into a free port and restart your computer. While the computer starts up, press F12 or F8 (your bios screen should display what key needs to be pressed) to get to the screen that allows you to boot from a device. Select the USB Device and Linux Mint will begin to load.

Unlike Windows, you will not be prompted to install the operating system yet.  Instead, Mint will load the live desktop mode which will allow you try out the fully featured operating system straight from the USB drive. This is awesome for testing out a distro to see how it works before installing it.

For the purpose of this guide we like Linux Mint and would like to install it. Double click the disc icon on the desktop that says Install Linux Mint. This will start up the installer.  Go through the next couple screens; choosing language, etc, until you get to the "Installation Type" screen.

<h4>Partitions & Dual boot</h4>
If you are only wishing to install one operating system then the next step is easy.  Just choose the Erase disk and install Linux Mint.  This will setup the hard drive with the correct partitions.

Otherwise, if you wish to run Linux Mint alongside Windows then you have two options.  Use the built in option of Install alongside Windows or manually configure the disk partitions.
<blockquote>For Dual booting Windows and Linux Mint <strong>Always</strong> install Windows first.  This will allow for Linux's grub menu to control how the two os's are booted.  Also it will reduce a lot of issues with dual booting</blockquote>

<h3>Post-Installation</h3>
Once we are done with the install lets run the following command in our fancy new console.
<code>sudo apt-get update</code>
This will update all of our currently installed packages to their newest versions. This is important since we are installing Linux Mint 13 not 14 so there may be lots of updates.

<h3>Optimus meet Bumblebee</h3>
This next section is only applicable if you own one of the aforementioned laptops with both an integrated and Nvidia Optimus video card. <strong>ONLY DO THIS FOR OPTIMUS LAPTOPS!</strong> Since Nvidia doesn't directly support Linux drivers we will use a community build workaround aptly named Bumblebee. This will allow us to utilize our discrete video card in Linux and enable the power savings feature for Optimus.
<blockquote>Even if you don't care about using it installing Bumblebee will dramatically increase your battery life. I went from one hour and fifty-eight minutes to three hours and 20 minutes on a fully charged battery. That's about a 43% increase in battery life.</blockquote>
The best guide to use for installing bumblebee comes from the <a href="https://wiki.ubuntu.com/Bumblebee">Ubuntu Wiki page</a>. Run each of these console commands in order (ignore the // lines).
<pre class="lang:sh decode:true" title="Console Commands for Bumblebee Install">// Adds the repo for bumblebee
sudo add-apt-repository ppa:bumblebee/stable

// Update all packages (will include the above repo)
sudo apt-get update

// Install Bumblebee
sudo apt-get install bumblebee bumblebee-nvidia linux-headers-generic</pre>
Once complete restart your system. We need to check and see if Bumblebee installed correctly. To test this run `glxspheres` in a console window for a couple seconds, then press ctrl+C to quit. Note the amount of fps you received. Now run `optirun glxspheres` in console for a couple second and like before check the amount of fps. You should see a large increase. Mine went from 50fps to around 116fps. If at any time you receive an error check the github page for Bumblebee as it contains a list of common errors. Otherwise, congratulations installing Bumblebee is the most difficult portion of this guide.
<h3>Upgrade to Linux Mint 14?</h3>
Now you may have wondered why we decided to use Linux Mint 13 over the newly release 14. Well there are a few reasons. For one Linux Mint 13 is a <abbr title="Long-term Support">LTS</abbr> release so we know that at least until 2017 there will be fixes. Another reason is the previous section on Bumblebee install is impossible from everything I tried on a Linux Mint 14 system.

Don't worry though we are going to get the best of both worlds. Linux Mint has conveniently enabled backporting for all the new 14 features into Linux Mint 13. Follow these steps to enable backporting.
<ul>
	<li>Go to Software Sources in the menu</li>
	<li>Click the checkbox for Backported Packages</li>
	<li>Launch the Update Manager</li>
	<li>Make sure all level 1 and level 2 updates are selected</li>
	<li>Install and restart</li>
</ul>
This process is described on the <a href="http://blog.linuxmint.com/?p=2225">Linux Mint blog</a>.

Now check a couple apps and make sure we didn't break anything. If you install Bumblebee make sure to run optirun glxspheres again. If you have no errors at this point the rest is downhill.
<h3>Install some apps</h3>
We can now install some apps from the awesome software manager program. Just open and search for the app's name. The following are a list of apps that are extremely useful.
<ul>
	<li><strong>Yakuake</strong> - A dropdown console similar to old first-person shooter games</li>
	<li><strong>BleachBit</strong> - The Linux version of CCLeaner</li>
	<li><strong>Wine</strong> - A Windows integration layer for running Windows applications inside Linux</li>
</ul>
The next series of apps I would install from their respective websites. For some reason they don't seem as updated in the software manager.
<ul>
	<li>Dropbox</li>
	<li>Google Chrome</li>
</ul>
The last series of apps we will install directly from the console.
<ul>
<ul>
	<li>Keepass</li>
</ul>
</ul>
<pre class="lang:sh decode:true" title="Install Keepass2 for Ubuntu">sudo apt-add-repository ppa:jtaylor/keepass
sudo apt-get update
sudo apt-get install keepass2
sudo apt-get install xdotool</pre>
<ul>
<ul>
	<li>Git and cURL</li>
</ul>
</ul>
<pre class="lang:sh decode:true" title="Git &amp; cURL">sudo apt-get install git
sudo apt-get install curl</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>647</wp:post_id>
		<wp:post_date>2013-06-12 21:45:46</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bumblebee"><![CDATA[Bumblebee]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="series" nicename="perfect-linux-development-environment"><![CDATA[Perfect Linux Development Environment]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_series_part</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Unit Testing</title>
		<link>http://blog.joshmfrankel.com/?p=733</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=733</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>733</wp:post_id>
		<wp:post_date>2013-06-13 11:33:15</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Leveling up CSS with Sass (Advanced Techniques - Part 2)</title>
		<link>http://blog.joshmfrankel.com/?p=764</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=764</guid>
		<description></description>
		<content:encoded><![CDATA[<em>Lets recap what we learned in part 1 of Leveling up CSS with SASS</em>

First we learned how we setup a Sass programming environment using Scout. Next we learned about using variables to store values for consistency and later usage. Lastly, we utilized nesting to create specificity on CSS rules that makes logical sense.

In part two of the series we will delve into some more advanced techniques such as: Mixins Vs. Placeholders, Functions, Conditionals, Calculations, and String Interpolation.
<h3>Mixins Vs. Placeholders</h3>
So nesting and variables are great and awesome, but where SASS really starts to shine is with Mixins and Placeholders. These two techniques allow you to pre-build blocks of SASS styles that can then be applied to elements simply by including the correct Mixin or Placeholder within the specific style.
<h4>Mixins</h4>
A Mixin is similar to a method in languages like PHP. It performs a single action and can accept parameters that modify parts of its result. Mixins are defined using the @mixin syntax followed by curly braces which contain the styles to be applied. For parameters Mixins use parenthesis like other languages. When calling a defined Mixin the @include [mixin-name]; syntax is used.
<pre class="lang:sass decode:true" title="Mixins">// The Mixin definition
@mixin center-img ($width, $height) {

     height: $height; // The height parameter
     left: 50%;
     position: absolute;
     width: $width; // The width parameter

}

// The SASS code using the mixin
#container {
    .header img {

         // Include the defined mixin
         @include center-img (960px, 350px);
    }
    .title img {

         // Include the defined mixin
         @include center-img (300px, 150px);
    }
}

//////////////////////////////////////////
// The Compiled CSS from the SASS Mixin //
//////////////////////////////////////////
#container .header img {

     height: 350px
     left: 50%;
     position: absolute;
     width: 960px;

}
#container .title img {

     height: 150px
     left: 50%;
     position: absolute;
     width: 300px;

}</pre>
As you can see from above the two rules utilize the SASS Mixin to center an image. Some of you may have noticed that to properly center an image we also need to use margin. Not to fear I will cover this later when we discuss calculations and functions.

<h4>Placeholders</h4>
<p>Now placeholders and mixins are very similiar at first glance. They both contain chunks of reusable style code, their definitions are never compiled as only the output is compiled inside the style rule, and they both allow you to nest other rules inside of them. However, this is where the similarities end.</p>

<p>Placeholders, unlike Mixins, do not allow for the usage of parameters. Placeholders do exactly what they say, they hold your place. In addition to not being able to use parameters, placeholders use slightly different syntax.</p>

<p>When defining placeholders you use %[placeholderName]. Also when calling a placeholder you must use the @extend %[placeholderName] directive.</p>

<pre class="lang:sass decode:true " title="Placeholders" >// The Placeholder
%center-img {
    height: 350px;
    left: 50%;
    position: absolute;
    width: 960px;
}

// The SASS code using the placeholder
#container {
    .header img {

         // Extend the placeholder
         @extend %center-img;
    }
    .title img {

         // Extend the placeholder
         @extend %center-img;
    }
}

////////////////////////////////////////////////
// The Compiled CSS from the SASS Placeholder //
////////////////////////////////////////////////
#container .header img,
#container .title img {

     height: 350px
     left: 50%;
     position: absolute;
     width: 960px;

}</pre> 

<h3>So when do I use them?</h3>
<p>Right about now you are probably thinking, "Mixins are so much better with their sexy parameters. Never going to use you placeholders". This is basically what I thought, and subsequently wrote off using placeholders for a while. It wasn't until a co-worker showed me how awesome placeholder are that I started to use them.</p>

<blockquote>Placeholders allow chunks of content to be reused and DO NOT duplicate styles like Mixins do.</blockquote>

<p>If you look closer at the compiled code and compare the two you will notice the difference. The Mixin compilation has two different CSS rules with the same style code inside them. The placeholder compilation only builds the style code once and combines the two selectors. This is the power of placeholders over mixins.</p>

<p>If you are building something that needs to be reused again and again and doesn't have to be dynamic then you should be using placeholders. Otherwise, if your needs are dynamic reusability then a Mixin might work better for you. Using placeholders as much as you can keeps your code DRY. Here is a quick diagram to outline some of the differences.</p>

[caption id="attachment_816" align="alignnone" width="800"]<a href="http://blog.joshmfrankel.com/wp-content/uploads/2013/08/Sass-Part-2-New-Page-1.png"><img src="http://blog.joshmfrankel.com/wp-content/uploads/2013/08/Sass-Part-2-New-Page-1.png" alt="Sass: Mixins Vs. Placeholders" width="800" height="912" class="size-full wp-image-816" /></a> Sass: Mixins Vs. Placeholders[/caption]

<h3>Functions</h3>
<p>These almost identical to how functions behave in languages like php. They can take in parameters to dynamically change their results... Sounds like a Mixin, right? The difference between functions and mixins is that a function <strong>MUST</strong> use the @return keyword to return a value.</p>

<p>This means that only one value can be returned from a function. Functions can be called by using the function name inside the value of a CSS property</p>

 
<pre class="lang:sass decode:true " title="Functions" >// Calculate REM value for font (based on font-size:62.5% on the body)
@function calcREM ($number) {
    @return (strip-units($number)/10) * 1rem;
}

// Call the function
h1 {
    font-size: calcREM(20px);
}

//////////////////
// Compiled CSS //
//////////////////
h1 {
    font-size: 2.0rem;
}</pre> 

<h3>Defaults, Conditionals, Calculations, and String Interpolation</h3>
<p>Let's build a new Mixin that uses all of these concepts.</p><p><strong>Defaults</strong> refer to parameter fallback values. These allow the developer to specify values that occur if nothing is used as the parameter.</p><p>A <strong>conditional</strong> allows for dynamic results based on a value. Sass supports IF, ELSE, ELSE IF, FOR, EACH, and WHILE.</p>
<p><strong>Calculations</strong> follow the same process as a normal programming languages.</p>
<p><strong>String Interpolation</strong> is similiar to a variable variable in php, or dynamically naming properties. String interpolation uses #{} to enclose items that should be explicitly output.</p>


<p>Lets go back to our Mixin center-img and fix some of its issues</p>
 
<pre class="lang:sass decode:true " title="A Mixin with defaults, conditionals, calculations" >// Make sure parent element is position: relative;
// Notice the defaults listed here after the parameters: horizontal, 12px, 20px
@mixin absCenterImg ($width, $height, $centerType: horizontal, $font-size: 12px, $line-height: 20px, $class: temp) {

    position: absolute;
    height: $height;
    width: $width;

    // String interpolation prevents SASS from trying to divide font-size by line-height on this line
    // Instead it will output font: 12px/20px;
    font: #{$font-size}/#{$line-height};

    a.#{$class} {
        color: red;
    }

    // SASS Conditional Directive
    @if $centerType == vertical {
        top: 50%;
        
        // A SASS Calculation
        margin-top: -($height/2);

    } @else if $centerType == horizontal {
        left: 50%;

        // Another Calucation
        margin-left: -($width/2);
    } @else if $centerType == both {
        left: 50%;

        // Yet another calc
        margin-left: -($width/2);
        top: 50%;

        // Last calculation
        margin-top: -($height/2);
    }

}

// The style code calling the mixin
#container img {
     @include center-img(960px, 350px, horizontal, 14px, 21px, foo);
}

//////////////////
// Compiled CSS //
//////////////////
#container img {

     position: absolute;
     height: 350px;
     width: 960px;
     font: 14px/21px;
     
     // The string interpolated class
     a.foo {
         color: red;
     }

     left: 50%
     
     // Calculated value
     margin-left: -175px;
}

</pre> 
<p>So that's the end of lesson two. We learned the difference between <strong>Mixins</strong> and <strong>Placeholders</strong> and when to use them. <strong>Functions</strong> are useful for performing calculations and returning a single value. Parameters can have <strong>default</strong> values applied to them to enhance functionality. <strong>Conditionals</strong> control the flow of logic. And <strong>String Interpolation</strong> is useful for variable variables and preventing calculations.</p>
<p>There are still plenty of different techniques to be used with SASS. I encourage you to take a look at the <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html">Sass Documentation</a> for more skills. For the next part I will go through some basic Project Organization techniques with SASS.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>764</wp:post_id>
		<wp:post_date>2013-08-15 13:25:44</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="series" nicename="leveling-up-css-with-sass"><![CDATA[Leveling Up CSS with Sass]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_series_part</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>10 Wordpress tricks</title>
		<link>http://blog.joshmfrankel.com/?p=829</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=829</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>829</wp:post_id>
		<wp:post_date>2013-10-17 14:01:58</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>5 Wordpress Avatar Tricks</title>
		<link>http://blog.joshmfrankel.com/?p=830</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=830</guid>
		<description></description>
		<content:encoded><![CDATA[ Default Avatars
<pre class="lang:php decode:true " title="Default Avatars" >add_filter( 'avatar_defaults', 'new_default_avatar' );

function new_default_avatar ( $avatar_defaults ) {
        //Set the URL where the image file for your avatar is located
        $new_avatar_url = 'http://swift.mighty-site.com/filebin/images/wordpress/default_wordpress_avatar.jpg';
        //Set the text that will appear to the right of your avatar in Settings&gt;&gt;Discussion
        $avatar_defaults[$new_avatar_url] = 'Your New Default Avatar';
        return $avatar_defaults;
}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>830</wp:post_id>
		<wp:post_date>2013-10-17 15:35:37</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>5 Useful CSS shorthand properties that every Web Developer should know</title>
		<link>http://blog.joshmfrankel.com/snippets/5-useful-css-shorthand-properties-that-every-web-developer-should-know/</link>
		<pubDate>Fri, 22 Feb 2013 15:00:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=510</guid>
		<description></description>
		<content:encoded><![CDATA[I believe Jeffrey Way has a quote somewhere that goes like, "think about the developer who can save a couple seconds on a task. At the end of the year he will have accomplished that much more than the developer who didn't". If you have begun to streamline your process learning shorthand css is one method for increasing efficiency.
<h3>Background</h3>
A staple of every web developer's css tool kit. 99% of websites will require the use of this property, making it an excellent way to reduce time on task. I seem to use this type of shorthand whenever I am using a sprites image file.
<blockquote><strong>background:</strong> [background-color] [background-image] [background-repeat] [background-attachment] [background-position];</blockquote>
<pre class="lang:css decode:true" title="The Wrong Way">.bg {
     background-color: #323232;
     background-image: url(../images/layout/sprites.png);
     background-repeat: no-repeat;
     background-attachment: scroll;
     background-position: 10px 20px;
}</pre>
<pre class="lang:css decode:true" title="The Right Way">.bg {
     background: #323232 url(../images/layout/sprites.png) no-repeat scroll 10px 20px;
}</pre>
<h3>Font</h3>
Probably my favorite css shorthand property. Combines everything you need to style a font. Super quick and concise format. The only thing it doesn't include is letter-spacing.
<blockquote><strong>font:</strong> [font-style] [font-variant] [font-weight] [font-size]/[line-height] [font-family];</blockquote>
<pre class="lang:css decode:true" title="The Wrong Way">p {
     font-family: "SophiaProLight", Verdana, sans-serif;
     font-size: 12px;
     font-weight: 600;
     font-style: italic;
     line-height: 23px;
     font-variant:small-caps;
}</pre>
<pre class="lang:css decode:true" title="The Right Way">p {
     font: italic small-caps 600 12px/23px "SophiaProLight", Verdana, sans-serif;
}</pre>
<h3>Margin / Padding</h3>
A truly tricky shorthand property. This is one I still get mixed up.

The format goes as such: margin-top margin-right margin-bottom margin-left. If you think about the short hand like the face of a clock and imagine the clock starting at 12 this becomes a whole lot easier.

However, there are three additional short hand properties. For all sides at once you just specify one measurement (margin: 15px). For the same measurement on top / bottom and right / left you specify just two measurements starting with the top / bottom (padding: 7px 5px).

And now for the tricky one. If your left / right sides are the same measurement but the top / bottom are different you specify top measurment, followed by the joint left / right measurement, and finish with the bottom measurement (margin: 10px 20px 13px). Check the example below as I have shown with code all methods.
<blockquote><strong>margin:</strong> [margin-top] [margin-right] [margin-bottom] [margin-left];</blockquote>
<pre class="lang:css decode:true" title="The Wrong Way">p {
     margin-top:7px;
     margin-right: 10px;
     margin-bottom: 13px;
     margin-left: 5px;

     padding-top:7px;
     padding-right: 5px;    
     padding-bottom: 7px;
     padding-left: 5px;
}
em {
     margin-top:10px;
     margin-right: 20px;
     margin-bottom: 13px;
     margin-left: 20px;

     padding-top: 15px;
     padding-right: 15px;
     padding-bottom: 15px;
     padding-left: 15px;
}</pre>
<pre class="lang:css decode:true" title="The Right Way">p {
     // Top Right Bottom Left
     margin: 7px 10px 13px 5px;

     // Top &amp; Bottom  Left &amp; Right
     padding: 7px 5px;
}

em {
     // Top Right &amp; Left Bottom
     margin: 10px 20px 13px;

     // All four sides
     padding: 15px;
}</pre>
<h3>Border</h3>
Similar to the margin / padding shorthand, you can declare all sides of a border with one declaration. However, unlike margin / padding this is the only format for the border shorthand.  Addtionally, properties such as border-width, border-style, and border-color can be combined into a single line.

<blockquote><strong>border:</strong> [border-width] [border-style] [border-color];</blockquote>
<pre class="lang:css decode:true" title="The Wrong Way">div {
     border-left: 1px solid red;
     border-right: 1px solid red;
     border-top: 1px solid red;
     border-bottom: 1px solid red;
}</pre>
<pre class="lang:css decode:true" title="The Right Way">div {
     border: 1px solid red;
}</pre>
<h3>List</h3>

This is lesser used shorthand property for styling ordered and unordered lists.
<blockquote><strong>list-style:</strong> [list-style-type] [list-style-position] [list-style-image];</blockquote>
<pre class="lang:css decode:true" title="The Wrong Way">ul {
    list-style-type: disc;
    list-style-position: inside;
    list-style-image: url(bullet.gif);
}</pre>
<pre class="lang:css decode:true" title="The Right Way">list-style: disc inside url(bullet.gif);</pre>
<h3>Box Shadow</h3>
While this is not a shorthand property, box-shadow's default format is very akin to earlier css shorthand properties. 

<blockquote><strong>box-shadow:</strong> [horizontal-length] [vertical-length] [blur] [spread] [color] [inset]</blockquote>
<pre class="lang:css decode:true" title="Box-shadow">box-shadow:  2px 2px 3px 0px rgba(172, 17, 19, 0.69);</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date>2013-02-22 09:00:02</wp:post_date>
		<wp:post_date_gmt>2013-02-22 15:00:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5-useful-css-shorthand-properties-that-every-web-developer-should-know</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css-3"><![CDATA[CSS 3]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[5 Useful #CSS shorthand properties that every #Web Developer should know http://wp.me/p2Drah-8e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>How to use CSS3 gradients with background images</title>
		<link>http://blog.joshmfrankel.com/snippets/how-to-use-css3-gradients-with-background-images/</link>
		<pubDate>Sat, 02 Feb 2013 17:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=658</guid>
		<description></description>
		<content:encoded><![CDATA[Using the background property in css you can specify a background image and a css3 gradient. This is particularly useful for png icons on top of gradients. In this instance the icon has a transparent background and is placed on top of the css3 gradient.

The proper format is background: [background-image], [background-gradient].
<blockquote><strong>Quick Tip:</strong> The comma tells CSS "Hey! There is a secondary rule, display it also."</blockquote>
When working with gradients, or CSS3 properties in general, it is important to specify a fallback style. In this case a standard background image and color should suffice.
<pre class="lang:css decode:true">/* Fallback css for browsers that don't support gradients */
background: url('/images/sprites.png') -260px -134px no-repeat #ae4446;

/**
 *
 * CSS generated from ultimate css gradient generator
 * www.colorzilla.com/gradient-editor
 * 
 **/
background: url('/images/sprites.png') -260px -134px no-repeat, 
     -moz-linear-gradient(top, #ae4446 0%, #9b262b 100%); /* FF3.6+ */

background: url('/images/sprites.png') -260px -134px no-repeat, 
     -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ae4446), color-stop(100%,#9b262b)); /* Chrome,Safari4+ */

background: url('/images/sprites.png') -260px -134px no-repeat, 
     -webkit-linear-gradient(top, #ae4446 0%,#9b262b 100%); /* Chrome10+,Safari5.1+ */

background: url('/images/sprites.png') -260px -134px no-repeat, 
     -o-linear-gradient(top, #ae4446 0%,#9b262b 100%); /* Opera 11.10+ */

background: url('/images/sprites.png') -260px -134px no-repeat, 
     -ms-linear-gradient(top, #ae4446 0%,#9b262b 100%); /* IE10+ */

background: url('/images/sprites.png') -260px -134px no-repeat, 
     linear-gradient(to bottom, #ae4446 0%,#9b262b 100%); /* W3C */</pre>
A great resource for building CSS3 Gradients is <a href="www.colorzilla.com/gradient-editor">Ultimate CSS Gradient Generator</a>. It will generate proper styles for the gradients in all major browsers along with fallback styles for older ones.  All you have to do is add the first line for the background image url and you are good to go.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date>2013-02-02 11:00:00</wp:post_date>
		<wp:post_date_gmt>2013-02-02 17:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-use-css3-gradients-with-background-images</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css-3"><![CDATA[CSS 3]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[How to use #CSS3 gradients with background images http://wp.me/p2Drah-aC]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Reload favicon in Chrome Browser</title>
		<link>http://blog.joshmfrankel.com/quick-bit/reload-favicon-in-chrome-browser/</link>
		<pubDate>Thu, 13 Jun 2013 03:44:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=713</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Chrome likes to hold onto old favicons.  Hard refreshing, clearing dns, etc don't seem to do anything to update them.  However, there is a fairly simple way to force a refresh.</p>  
<p>All you have to do is type the favicon's url into the browser `www.website.com/images/favicon.ico' and have the browser load it (ctrl+f5).  It will then automatically download the favicon, which you can delete if you want.  Finally, without changing url locations, execute a refresh and the favicon should update for you.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>713</wp:post_id>
		<wp:post_date>2013-06-12 21:44:28</wp:post_date>
		<wp:post_date_gmt>2013-06-13 03:44:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reload-favicon-in-chrome-browser</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="browser"><![CDATA[Browser]]></category>
		<category domain="category" nicename="quick-bit"><![CDATA[Quick Bit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Leveling up CSS with Sass (Basics &amp; Setup - Part 1)</title>
		<link>http://blog.joshmfrankel.com/articles/leveling-up-css-with-sass-basics-setup-part-1/</link>
		<pubDate>Thu, 20 Jun 2013 15:30:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.joshmfrankel.com/?p=727</guid>
		<description></description>
		<content:encoded><![CDATA[In this series of articles, I will go through the ends and out of Sass. I will focus on the Basics and Setup, Advanced Techniques, Project Organization, and Best Practices and Common Pitfalls. I would like to apologize now for all the terrible puns that will come up (Sass tends to lend itself well to them)

Alright so now lets dive into Sass. But before we start writing code, what the heck is Sass anyway?
<h3>What is this Sass you speak of?</h3>
Sass or Syntactically Awesome Stylesheets, is pre-processor language for adding functionality and flexibility to CSS. A pre-processor is just a fancy way of saying that this code will be compiled in a syntax that is usable to another language, CSS in this case. More simply Sass adds variables, functions (mixins), inheritance, and nesting to make CSS awesome again.

There are two types of sass syntax: indent-based (.sass) and traditional braces (.scss). I will be using the traditional style as it is closer to vanilla CSS. Indent-based might be more familiar to users of python and ruby.
<h3>Why should I use it?</h3>
There are plenty of reasons to use Sass. The biggest advantage is the sheer amount of re-usability of style code. On top of this for you people who love to super organize your code Sass has an awesome @import rule that doesn't slow down page load. Here are just a few awesome advantages of using a pre-processor language.
<ul>
	<li>Functions (mixins)</li>
	<li>Variables</li>
	<li>Nesting Inheritance</li>
	<li>@import rules that rule!</li>
	<li>Project Organization</li>
	<li>Unit Calculations (2px * 2px = 4px)</li>
</ul>
Getting excited to start using Sass? Well then lets setup our dev environment.
<h3>Set it up!</h3>
There are number of excellent apps and command line processes for setting up a sass environment. So depending on your comfort level you can decide which option is the best fit for you.

All compilers for Sass follow the same process. The compiler runs a polling process that checks for file changes. When a Sass file is updated all files that are affected by it are compiled into CSS. Instantaneous compiling.

In addition to checking for file changes and compiling the output CSS many of the compilers feature additional options such as:

<strong>Debug mode</strong> - When enabled it will create comments in the compiled CSS that refer to the location they are created in the Sass. This is especially useful given that Sass compilers have a couple different compiler output methods

<p><strong>Output Style</strong> - There are four different output styles: Nested, Expanded, Compact and Compressed. Nested is the default and will properly indent nested styles. Expanded is exactly like vanilla CSS. Compact makes each rule take up a single line. Compressed removes all white space and essentially minifies the output.</p>
<a href="http://blog.joshmfrankel.com/wp-content/uploads/2013/06/scout-logo.png"><img class="alignnone size-full wp-image-771" title="Scout logo from http://mhs.github.io/scout-app/" alt="Scout Logo - http://mhs.github.io/scout-app/" src="http://blog.joshmfrankel.com/wp-content/uploads/2013/06/scout-logo.png" width="300" height="75" /></a>
<blockquote>"Scout is a cross-platform app that delivers the power of Sass &amp; Compass into the hands of web designers."</blockquote>
Scout is probably the quickest and most painless way of setting up a Sass development environment. The Scout app is an adobe air application that you run on your desktop which contains all the necessary files for compiling Sass specific code.
<ul>
	<li>Download <a href="http://mhs.github.io/scout-app/">Scout</a> and install it</li>
	<li>Create a new project by clicking the plus sign</li>
	<li>Set the new project to your top most project directory</li>
	<li>Edit the project's input (Sass file locations) and output (CSS file locations) folder settings</li>
	<li>Press the play button on the project and get Sassy!</li>
</ul>
<strong>Alternatives</strong>: <a href="http://alphapixels.com/prepros/">Prepros</a>
<br /><br />
<a href="http://blog.joshmfrankel.com/wp-content/uploads/2013/06/guard-logo.png"><img class="alignnone size-full wp-image-774" title="Guard logo from https://github.com/guard/guard" alt="Guard logo from https://github.com/guard/guard" src="http://blog.joshmfrankel.com/wp-content/uploads/2013/06/guard-logo.png" width="300" height="308" /></a>
<blockquote>"Guard is a command line tool to easily handle events on file system modifications."</blockquote>
Guard is my preferred method of compiling Sass files. It runs in the command line with a few simple commands. Things to note is you need a working installation of ruby, ruby gems, and guard before you can use guard-sass. However, once setup it integrates nicely with growl or notification apps.
<ul>
	<li>Install ruby</li>
	<li>Run gem install guard</li>
	<li>Run gem install guard-sass</li>
	<li>Run guard init in your project directory</li>
	<li>Edit the Guardfile according to the <a href="https://github.com/hawx/guard-sass">documentation</a></li>
	<li>Run guard inside the directory and enjoy</li>
</ul>
<strong>Alternatives</strong>: <a href="http://compass-style.org/">Compass</a>

So now that we have our Sass environment setup we can start actually utilizing the pre-processor. Make sure your method of compiling Sass is active before the next steps
<h3>$heading: "Variables";</h3>
Lets take a look at Sass variables. These are the easiest to understand and use. Variables are defined by using a dollar sign($) to denote the start of them. A colon(:) is then used to separate the variable name from its value.

One of the great things about Sass is that it doesn't try to reinvent the syntax of CSS. It just extends it the make it more powerful
<pre class="lang:sass decode:true" title="Sass: Variable example">// Variables look like php except we use colon(:) instead of =
$dark-blue: #1e427c;
$green    : #7fb636;

// A style using a variable
h1 {
    color: $dark-blue;
}
a {
    background-color: $green;
    color: #fff;
}</pre>
<pre class="lang:css decode:true" title="CSS: Compiled">/**
 * This is the compiled CSS code
 */
h1 {
    color: #1e4s7c;
}
a {
    background-color: #7fb636;
    color: #fff;
}</pre>
<p>There it is, Sass at its most basic. By defining a variable before at the beginning of a file it can be reused later to create DRY code.</p>
<h3>Nesting {<small>nesting</small>}</h3>
<p>Nesting in Sass works logically and just makes sense.  By placing rules inside one another they inherit their parent rule selectors. By nesting Sass rules you also give yourself a visual cue for selectors that are further down in the DOM.</p><blockquote><strong>Pro Tip:</strong> While nesting selectors is awesome, don't get carried away with them. If a single class selector will suffice there is no need to nest it within html body etc. Too much nesting will create unnecessary code bloat.</blockquote>
 
<pre class="lang:sass decode:true " title="Sass: Nesting demo" >
// Top level nested style
.twitter-feed {
    float:right;
    width: 300px;

    // Inner nested
    .heading {
        font: 400 14px/20px Verdana, sans-serif;
        color: #fff;
    }
    p {
        color: #525252;

        // Inner Inner nested
        a {
            text-decoration: none;
            color: #00FF00;
        }
    }
}</pre> 
 
<pre class="lang:css decode:true " title="CSS: Compiled Nested Sass" >.twitter-feed {
    float: right;
    width: 300px;
}
.twitter-feed .heading {
    font: 400 14px/20px Verdana, sans-serif;
}
.twitter-feed p {
    color: #525252;
}
.twitter-feed p a {
    text-decoration: none;
    color: #00FF00;
}</pre> 


By this point you have setup a Sass environment and created your very first Sass file. In the <strong>next article</strong> I will go through more advanced techniques for using Sass including mixins, string interpolation, placeholders, extending, and calculations.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>727</wp:post_id>
		<wp:post_date>2013-06-20 09:30:30</wp:post_date>
		<wp:post_date_gmt>2013-06-20 15:30:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>leveling-up-css-with-sass-basics-setup-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="articles"><![CDATA[Articles]]></category>
		<category domain="series" nicename="leveling-up-css-with-sass"><![CDATA[Leveling Up CSS with Sass]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_series_part</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_spost_short_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[Leveling up #CSS with #Sass.  Part 1: Basics & Setup]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245243</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245252</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_2245258</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>Josh Frankel</title>
    <link>http://joshfrankel.me/blog</link>
    <description>Web Development Simplified - a blog by Josh Frankel</description>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jan 2016 12:47:51 -0500</lastBuildDate>
    <pubDate>Thu, 28 Jan 2016 12:47:51 -0500</pubDate>
    <copyright>(c) 2011-2016</copyright>
    <atom:link href="http://joshfrankel.me/blog/rss.xml" rel="self" type="application/rss+xml" />
    <image>
       <title>Josh Frankel</title>
       <url>http://joshfrankel.me/blog/img/design/josh-frankel-publisher-logo.png</url>
       <link>http://joshfrankel.me/blog</link>
       <description>Josh Frankel</description>
       <width>142</width>
       <height>90</height>
    </image>
    <ttl>1800</ttl>


        <item>
            <title>Create a many-to-many ActiveRecord association in Ruby on Rails with has_many :through and has_and_belongs_to_many</title>
            <description>&lt;p&gt;A common obstacle when building web applications are relational database associations. Without these it would be difficult to decrease the amount of duplicate data as well as increasing the overall database efficiency. The most common relationships are the: one-to-one, one-to-many, and many-to-many.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p itemprop=&quot;description&quot;&gt;In this article I&#39;ll go through the creation of a many-to-many relationship with the built-in &lt;code&gt;Ruby on Rails ActiveRecord&lt;/code&gt; associations, &lt;code&gt;has_many :through&lt;/code&gt; and &lt;code&gt;has_and_belongs_to_many:&lt;/code&gt;. Additionally, the specific differences between the two will be examined, but before all that let&#39;s first get some background on what is a many-to-many relationship.&lt;/p&gt;

&lt;h3&gt;The Many-to-Many Relationship&lt;/h3&gt;
&lt;p&gt;In relational database schemas, a &lt;code&gt;many-to-many&lt;/code&gt; association is when a database table is built in a way that relates it to another table through a joining table. There needs to be at least three table to accomplish this. This allows the developer to query the relationship between the two tables gather their respective collections.&lt;/p&gt;
&lt;p&gt;Diving into an example, let&#39;s say you have an application that requires data for programmers, clients, and their connected projects. You could start by saying that a &lt;code&gt;Programmer&lt;/code&gt; is a member of a &lt;code&gt;Project&lt;/code&gt; as well as a &lt;code&gt;Client&lt;/code&gt;. This would lead you to design your database schema to resemble something like this:&lt;/p&gt;
&lt;div class=&quot;thumbnail&quot;&gt;
  &lt;img src=&quot;http://joshfrankel.me/blog/img/2016/many-to-many-bad-erd.png&quot; alt=&quot;An ERD example of what not to do&quot; /&gt;
  &lt;div class=&quot;caption&quot;&gt;An ERD example of what not to do&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately, you now have set yourself up for a headache later on. To use this database you&#39;ll have to contend with having to create a &lt;code&gt;project_id&lt;/code&gt; foreign key in each subsequent table that needs an association with the &lt;code&gt;Project&lt;/code&gt; table. This can get hairy pretty quick.&lt;/p&gt;
&lt;p class=&quot;well floated&quot;&gt;&lt;strong&gt;Referential Integrity&lt;/strong&gt;&lt;br /&gt;A standard of databases that states data must remain consistent and valid when dealing with a relationship between two tables.&lt;/p&gt;
&lt;p&gt;As an example, you could delete say a &lt;code&gt;Project&lt;/code&gt; record that is related to a &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Client&lt;/code&gt;. Well now both the &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Client&lt;/code&gt; records contain a &lt;code&gt;project_id&lt;/code&gt; key that refers to a deleted record. Which would be a violation of basic referential integrity.&lt;/p&gt;

&lt;p&gt;So, that didn&#39;t work out very well. Let&#39;s take another stab at it from the opposite direction.&lt;/p&gt;
&lt;p&gt;If every &lt;code&gt;Project&lt;/code&gt; has a &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Client&lt;/code&gt; attached to it, then we could say that a &lt;code&gt;Project&lt;/code&gt; belongs to a &lt;code&gt;Programmer&lt;/code&gt; and a &lt;code&gt;Project&lt;/code&gt; also belongs to a &lt;code&gt;Client&lt;/code&gt;. Here it is organized into a new entity relationship diagram.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot; itemprop=&quot;image&quot; itemscope itemtype=&quot;https://schema.org/ImageObject&quot;&gt;
  &lt;img src=&quot;http://joshfrankel.me/blog/img/2016/many-to-many-good.png&quot; alt=&quot;An ERD example of a Many-to-many association&quot; /&gt;
  &lt;meta itemprop=&quot;url&quot; content=&quot;http://joshfrankel.me/blog/img/2016/many-to-many-good.png&quot; /&gt;
  &lt;meta itemprop=&quot;width&quot; content=&quot;780&quot; /&gt;
  &lt;meta itemprop=&quot;height&quot; content=&quot;398&quot; /&gt;
  &lt;div class=&quot;caption&quot; itemprop=&quot;caption&quot;&gt;
    An ERD example of a Many-to-Many association
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&#39;s double check it to make sure it passes the previous problem we ran into.&lt;/p&gt;
&lt;p&gt;If we were to delete a &lt;code&gt;Project&lt;/code&gt; we would lose the project&#39;s data as well as the two foreign key fields: &lt;code&gt;programmer_id&lt;/code&gt; and &lt;code&gt;client_id&lt;/code&gt;. However, we don&#39;t end up with any invalid records in our system. Additionally, both the &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Client&lt;/code&gt; records are completely usable as stand-alone data.&lt;/p&gt;
&lt;p&gt;Good job! Looks like we successfully created a working database structure. Next I&#39;m going to show off how to create these tables from the command line and the Rails association methods that make using them easier.&lt;/p&gt;

&lt;h3&gt;How to leverage ActiveRecord Associations&lt;/h3&gt;
&lt;p&gt;There are a few different types of ActiveRecord associations. &lt;code&gt;has_one&lt;/code&gt; signifies that a model has one record of another specific model. &lt;code&gt;has_many&lt;/code&gt; is the same except there can be many records. &lt;code&gt;belongs_to&lt;/code&gt; is used to show that the model on the other side of the association is part of or belongs to the associated model.&lt;/p&gt;
&lt;p&gt;These are some of the basic fundamentals of ActiveRecord Assocations, at least from a theorhetical standpoint. However, for the purposes of this article we will focus on many-to-many associations which are accomplished with two of the more challenging associations that can be implemented. The &lt;code&gt;has_many :through&lt;/code&gt; and the &lt;code&gt;has_and_belongs_to_many:&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;has_many :through&lt;/h3&gt;
&lt;p class=&quot;well floated&quot;&gt;&lt;strong&gt;Rails Tip&lt;/strong&gt;&lt;br /&gt; I am using the shortened version of the &lt;code&gt;rails generate&lt;/code&gt; command which is simply &lt;code&gt;rails g&lt;/code&gt;. Nifty!&lt;/p&gt;
&lt;p&gt;The first step to implementing a &lt;code&gt;has_many :through&lt;/code&gt; association is to run the rails
generator to create the model and the migration files. We will use the entity relationship diagram (pictured above) to
create our application. I&#39;ve listed the appropriate migrations below. I recommend using the &lt;code&gt;rails generate model&lt;/code&gt; syntax, as it not only gives you a model but the matching migration file as well.&lt;/p&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails g model Programmer name:string
rails g model Client name:string
rails g model Project programmer:references client:references
rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pay close attention to the &lt;code&gt;Project&lt;/code&gt; model command syntax. The &lt;code&gt;:references&lt;/code&gt; syntax is a shortcut for
creating an index on the preceding field name, programmer and client in this instance, as well as marking them as foreign key constraints for the programmers and clients database tables.&lt;/p&gt;
&lt;p class=&quot;well floated&quot;&gt;&lt;strong&gt;What is a Join Table?&lt;/strong&gt;&lt;br /&gt; A join table acts as an intermediary between two or more tables. This provides a convient location for shared database fields to be stored (project_name or budget would be examples) as well as associating the tables to each other.&lt;/p&gt;
&lt;p&gt;For example using the programmer field, the &lt;code&gt;:references&lt;/code&gt; syntax will create a reference to a model with name programmer by creating an id called &lt;code&gt;programmer_id&lt;/code&gt; on the projects table and will constrain it to the programmers table. Once migrated (&lt;strong&gt;hint&lt;/strong&gt;: &lt;code&gt;rake db:migrate&lt;/code&gt;) you will be able to use the association between programmers and clients through the project &lt;strong&gt;join table&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, we&#39;ll need to come up with the proper Rails association methods to use. I find this part is easier when they are spoken out loud or in my head before I go about creating them. Not only is this a good practice to get into with the Rails methods but also before you create the initial database diagram.&lt;/p&gt;
&lt;p&gt;This may sound silly, but it can really help you to catch any logic in the associations that doesn&#39;t make sense. So speaking these out loud.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&quot;A Programmer has many projects.&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Client has many projects.&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Project belongs to a Programmer.&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Project belongs to a Client.&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Programmer has many Clients through a Project.&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Client has many Programmers through a Project.&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alright, those seem to make sense (we already know that they should work based on the discussion at the beginning of the article). Now we need to add the Rails methods to our respective model files.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/model/programmer.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:projects&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:projects&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/model/client.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:projects&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:programmers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:projects&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/model/project.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Projects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:programmer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:client&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By utilizing these associations we now have access to a number of helper methods (16 to be exact). Here they are directly from the RailsGuides documentation.&lt;/p&gt;
&lt;h4&gt;Built-in Association Methods&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;collection(force_reload = false)&lt;/li&gt;
  &lt;li&gt;collection&lt;&lt;(object, ...)&lt;/li&gt;
  &lt;li&gt;collection.delete(object, ...)&lt;/li&gt;
  &lt;li&gt;collection.destroy(object, ...)&lt;/li&gt;
  &lt;li&gt;collection=(objects)&lt;/li&gt;
  &lt;li&gt;collection_singular_ids&lt;/li&gt;
  &lt;li&gt;collection_singular_ids=(ids)&lt;/li&gt;
  &lt;li&gt;collection.clear&lt;/li&gt;
  &lt;li&gt;collection.empty?&lt;/li&gt;
  &lt;li&gt;collection.size&lt;/li&gt;
  &lt;li&gt;collection.find(...)&lt;/li&gt;
  &lt;li&gt;collection.where(...)&lt;/li&gt;
  &lt;li&gt;collection.exists?(...)&lt;/li&gt;
  &lt;li&gt;collection.build(attributes = {}, ...)&lt;/li&gt;
  &lt;li&gt;collection.create(attributes = {})&lt;/li&gt;
  &lt;li&gt;collection.create!(attributes = {})&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is now a properly set up has_many :through association which can be utilized by the preceding methods. I&#39;ve given examples of &lt;code&gt;collection.create(attributes = {})&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt; below.&lt;/p&gt;
&lt;div class=&#39;well&#39;&gt;
  &lt;h4&gt;Create Association&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Josh Frankel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mr. Nic Cage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;h4&gt;List ActiveRecord Collection&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clients&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;ActiveRecord::Associations::CollectionProxy [#&amp;lt;Client id: 1, created_at: &amp;quot;2016-01-25 18:45:00&amp;quot;, updated_at: &amp;quot;2016-01-25 18:45:00&amp;quot;, name: &amp;quot;Mr. Nic Cage&amp;quot;&amp;gt;]&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;has_and_belongs_to_many:&lt;/h3&gt;
&lt;p&gt;An alternative way for creating many-to-many associations in Rails, is to use the &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association or &lt;abbr title=&quot;has_and_belongs_to_many&quot;&gt;HABTM&lt;/abbr&gt; for short. The setup is very similiar to the &lt;code&gt;has_many :through&lt;/code&gt; association. The migration is slightly different though for the &lt;code&gt;has_many :through&lt;/code&gt; association so you&#39;ll need to make sure you are running these on a clean database (or you can rollback to previous migrations and create new ones).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails g model Programmer name:string
rails g model Client name:string
rails g migration CreateClientsProgrammers programmer:references client:references
rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;well floated&quot;&gt;&lt;strong&gt;Custom names for join tables&lt;/strong&gt;&lt;br /&gt; If you really want to use a different name for the join table you can add the &lt;code&gt;join_table: :database_table_name&lt;/code&gt; to your model association to point it to another database table.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Format&lt;/strong&gt;: &lt;code&gt;has_and_belongs_to_many :clients, join_table: :projects&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One of the first differences to notice is that we are not creating a model for the join table (projects). &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; doesn&#39;t require you to creating a model for this table. Additionaly, this type of association relies off of the two other tables for its naming convention, &lt;code&gt;clients_programmers&lt;/code&gt; in this instance.&lt;/p&gt;


&lt;p&gt;So again we need to create the proper associations in our model code. Speak these out loud. Again they are slightly different than the &lt;code&gt;has_many :through&lt;/code&gt; association.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&quot;A Programmer has many Clients&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Programmer can belong to a Client&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Client has many Programmers&quot;&lt;/li&gt;
  &lt;li&gt;&quot;A Client can belong to a Programmer&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, in our respective model code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/model/programmer.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_and_belongs_to_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:clients&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/model/client.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_and_belongs_to_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:programmers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again here is how you would utilize the associations in your code or console.&lt;/p&gt;
&lt;div class=&#39;well&#39;&gt;
  &lt;h4&gt;Create Association&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Josh Frankel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mr. Nic Cage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;h4&gt;List ActiveRecord Collection&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clients&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;ActiveRecord::Associations::CollectionProxy [#&amp;lt;Client id: 1, created_at: &amp;quot;2016-01-25 18:45:00&amp;quot;, updated_at: &amp;quot;2016-01-25 18:45:00&amp;quot;, name: &amp;quot;37Signals&amp;quot;&amp;gt;]&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, you might be asking yourself &quot;Why would I ever use the has_many :through association when has_and_belongs_to_many: is much easier to setup&quot;. Well the next section will explain the downsides of it and why generally using &lt;code&gt;has_many :through&lt;/code&gt; is the best practice.&lt;/p&gt;

&lt;h3&gt;When should I use them? has_many :through vs HABTM&lt;/h3&gt;
&lt;p&gt;While it looks like less work to use a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association, it actually can end up
costing you a lot of time down the road.&lt;/p&gt;
&lt;h4&gt;Validations&lt;/h4&gt;
&lt;p&gt;Imagine you build a system with the aforementioned HABTM association. One day your client (your actual client not the database table in the article) requests that the &lt;code&gt;Project&lt;/code&gt; table must always have data for a name and description field filled out or else it will be invalid. With a HABTM association there isn&#39;t a model in which to place the validation code. While with &lt;code&gt;has_many :through&lt;/code&gt; you have a model immediately ready for usage which would allow you to do write something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Shared Functionality&lt;/h4&gt;
&lt;p&gt;Furthermore, suppose that this same client (again, the person paying you for the application) requested that anytime a project&#39;s deadline_date was less than the current date that the system would automatically set the project as closed. With a HABTM association you would need to create an additional class or potentially a concern to package this functionality. While with &lt;code&gt;has_many :through&lt;/code&gt; having the model available gives you a logical place to bundle the shared methods.&lt;/p&gt;
&lt;p&gt;Here is an example of the shared methods while building upon the already existing model validations from above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;status_update&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close_project&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;active?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deadline_date&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close_project&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:closed&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There isn&#39;t anywhere to place this without creating more files with a HABTM association. This is by far the largest downside. &lt;code&gt;has_many :through&lt;/code&gt; on the other hand gives you a model for your join table, allowing you to validate fields and add shared functionality through methods.&lt;p&gt;
&lt;h4&gt;Difference in creation&lt;/h4&gt;
&lt;p&gt;Here is an example of a difference in some of the built-in methods that are created when you use either one of these associations. For &lt;code&gt;has_many :through&lt;/code&gt; you can create objects on the collection as seen above in the following format:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# First example&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Chris Cornell&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Another way of doing the same thing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Keanu Reeves&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, since we don&#39;t have a model with the configured HABTM association we&#39;ll need to build the association on the specific collection. Perceptive readers might have noticed this earlier in the HABTM create association example. Here it is again:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mr. Nic Cage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how for HABTM, we use &lt;code&gt;programmer.clients.create(client_attribute: value)&lt;/code&gt; to build the collection, unlike a &lt;code&gt;has_many :through&lt;/code&gt; where we can use the join table model like so: &lt;code&gt;programmer.projects.create(client: client_object)&lt;/code&gt;. Just another difference between the two association methods.&lt;/p&gt;
&lt;h4&gt;Existing database schemas&lt;/h4&gt;
&lt;p&gt;The best use case for a HABTM association is when you are working with an already built database. For some reason maybe the &lt;code&gt;has_many :through&lt;/code&gt; association just isn&#39;t going to work with the existing structure. Or maybe the system is already utilizing a custom HABTM association and removing it could irrevocably break parts of the system.&lt;/p&gt;
&lt;p&gt;A little dramatic I know.&lt;/p&gt;
&lt;p&gt;These sort of cases typically happen with legacy applications as HATBM is an older feature of Rails. With some good refactoring they could be removed from the system, given there is a good suite of tests configured.&lt;/p&gt;
&lt;h4&gt;Recommended usage&lt;/h4&gt;
&lt;blockquote class=&quot;floating-quote floating-quote-right&quot;&gt;&lt;div class=&quot;page-header&quot;&gt;RailsGuides&lt;/div&gt; &quot;The simplest rule of thumb is that you should set up a has_many :through relationship if you need to work with the relationship model as an independent entity. If you don&#39;t need to do anything with the relationship model, it may be simpler to set up a has_and_belongs_to_many relationship (though you&#39;ll need to remember to create the joining table in the database).&lt;br /&gt;&lt;br /&gt;
You should use has_many :through if you need validations, callbacks, or extra attributes on the join model.&quot;&lt;/blockquote&gt;
&lt;p&gt;I would recommend that 99% of the time that you stick to creating &lt;code&gt;has_many :through&lt;/code&gt; associations. They end up being much cleaner as well as saving you time down the road by giving you a model that is tied to your database&#39;s join table.&lt;/p&gt;
&lt;p&gt;The other 1% of the time, &lt;code&gt;has_and_belongs_to_many:&lt;/code&gt; is very useful for legacy relational database schemas as well as older systems. Sometimes HABTM makes a lot of sense for these situations.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;While &lt;code&gt;has_and_belongs_to_many:&lt;/code&gt; associations are quicker to setup they tend not to scale well as your applications requires more functionality. &lt;code&gt;has_many :through&lt;/code&gt; on the other hand are very versatile and give the added benefit of having a model directly mapped to your join table.&lt;/p&gt;
&lt;p&gt;Both types of many-to-many associations require the creation of a migration for a join table, a table that sits between two other tables and helps to association them to each other. This table is directly mapped to a model when using a &lt;code&gt;has_many :through&lt;/code&gt; association but not a HABTM.&lt;/p&gt;

&lt;h4&gt;TL;DR&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;has_many :through&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Requires a join table in the database&lt;/li&gt;
  &lt;li&gt;Creates a model for the join table which allows shared functionality and validations. 1 to 1 matching between database table and model.&lt;/li&gt;
  &lt;li&gt;Scales better and is more versatile&lt;/li&gt;
  &lt;li&gt;Allows for creation of objects on the collection &lt;code&gt;programmer.projects.create(client: client_object)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Takes slightly more setup work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;has_and_belongs_to_many:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Requires a join table in the database&lt;/li&gt;
  &lt;li&gt;Does not map a model to the join table, which means one less file but no validations or shared functionality without the creation of a second class&lt;/li&gt;
  &lt;li&gt;Allows for custom join table names via: &lt;code&gt;join_table: :database_table_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Faster to setup&lt;/li&gt;
  &lt;li&gt;Best for legacy architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we&#39;ve gone through the basics of designing a good many-to-many database structure, the console commands needed to create proper migrations, and the different setups of Rail&#39;s two many-to-many association methods.&lt;/p&gt;
&lt;p&gt;Was there something you would like added to this article? Got a better use case for the &lt;code&gt;has_and_belongs_to_many:&lt;/code&gt; association? How about a favorite association? Weigh in on it in the comments below.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2016/how-to/create-a-many-to-many-activerecord-association-in-ruby-on-rails</link>
            <guid>http://joshfrankel.me/blog/2016/how-to/create-a-many-to-many-activerecord-association-in-ruby-on-rails</guid>
            <pubDate>Thu, 28 Jan 2016 08:51:26 -0500</pubDate>
        </item>

        <item>
            <title>Add multiple columns to an existing table with a Rails migration</title>
            <description>&lt;p&gt;There are plenty of shortcuts with Ruby on Rail&#39;s implementation of migrations. Adding columns, removing column, add indexes, altering table or columns to just name a few. I recently ran across a simple trick that can be utilized to add multiple columns quickly to a migration&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;By utilizing the following formula with the Rails generator, you can add multiple columns to a single migration.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_first_column_and_second_column_to_model&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;first_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;second_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Rails generate command is smart enough to figure out the correct database table and construct a migration based off it. I imagine this could also be used with other migrations, not just altering an existing table.&lt;/p&gt;
&lt;p&gt;Got a Rails generate trick or tip? Tell me about it below in the comments.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2016/tips-and-tricks/add-multiple-columns-to-a-ruby-on-rails-migration</link>
            <guid>http://joshfrankel.me/blog/2016/tips-and-tricks/add-multiple-columns-to-a-ruby-on-rails-migration</guid>
            <pubDate>Mon, 18 Jan 2016 16:37:45 -0500</pubDate>
        </item>

        <item>
            <title>Recovering from common Ruby on Rails errors and pitfalls (Part 1)</title>
            <description>&lt;p&gt;Ruby on Rails is great to give out detailed error messages. Additionally, there is a wealth of knownledge in the online community of other developers running into the exact same error and the reasons behind why they are occuring. Over the past couple months I have compiled 5 errors that I see most often.&lt;/p&gt;
&lt;!--more--&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;A server is already running. Check pids/server.pid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;bind: Address already in use - bind(2) for 127.0.0.1:3000 (Errno::EADDRINUSE)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Terminal outputs rails console errors after stopping execution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;NameError at [route] uninitialized constant [class-name]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;MultiJson::ParseError at [route]. Oj::ParseError&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;br /&gt;
&lt;h2 id=&quot;1&quot;&gt;A server is already running&lt;/h2&gt;
&lt;hr /&gt;
&lt;h4&gt;&lt;strong&gt;What it looks like:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;A server is already running. Check /Users/username/Rails/sourcing/tmp/pids/server.pid.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;What it means:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Occassionally, when halting or using &lt;code&gt;ctrl+c&lt;/code&gt; to stop a rails server instance it will fail to unlock its process id. This will prevent you from starting a new server for the project as the server will think it is still running when it is in fact not.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;How to fix it: &lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;well&quot;&gt;
  &lt;p&gt;Remove the server.pid file from the project.&lt;/p&gt;
  &lt;p&gt;&lt;code&gt;rm /tmp/pids/server.pid&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;h2 id=&quot;2&quot;&gt;Address already in use&lt;/h2&gt;
&lt;hr /&gt;
&lt;h4&gt;&lt;strong&gt;What it looks like:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Booting &lt;span class=&quot;nv&quot;&gt;WEBrick&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Rails 4.2.4 application starting in development on http://localhost:3000
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rails server -h&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; more startup &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Ctrl-C to shutdown server
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2015-10-03 14:00:40&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  WEBrick 1.3.1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2015-10-03 14:00:40&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  ruby 2.2.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2015-02-26&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin14&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
Exiting
/Users/jfrankel/.rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/socket.rb:206:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;: Address already in use - &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; 127.0.0.1:3000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Errno::EADDRINUSE&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&lt;strong&gt;What it means:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This error means that the port number you specified is still in use by another application or potentially an unclosed instance of your rails server. Typically the port Rails uses is 3000 so we need to make sure that there isn&#39;t another process already using it.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;How to fix it:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;well&quot;&gt;
  &lt;p&gt;List out all the processes using the port your Rails server is using (default 3000). Switch tcp:3000 to just tcp if you want to list all processes.&lt;/p&gt;
  &lt;code&gt;lsof -wni tcp:3000&lt;/code&gt;
  &lt;p&gt;You should receive an output that looks like this:&lt;/p&gt;

  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;COMMAND   PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
  ruby    &lt;span class=&quot;m&quot;&gt;41704&lt;/span&gt; jfrankel   12u  IPv6 0xf3fe9a8ff1e035b9      0t0  TCP &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:hbci &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  ruby    &lt;span class=&quot;m&quot;&gt;41704&lt;/span&gt; jfrankel   13u  IPv4 0xf3fe9a8ff6649a29      0t0  TCP 127.0.0.1:hbci &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  &lt;p&gt;Then all you need to do is kill the specific process based on its PID. You can supply multiple PID&#39;s to the kill method separated by a space each if there are additional processes that need to be stopped.&lt;/p&gt;
  &lt;code&gt;kill -9 41704&lt;/code&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;h2 id=&quot;3&quot;&gt;Rails console gives errors in terminal after closing with Ctrl+z&lt;/h2&gt;
&lt;hr /&gt;
&lt;h4&gt;&lt;strong&gt;What it looks like:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jfrankel&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails c
Loading development environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Rails 4.2.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
2.2.1 :002 &amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;+  Stopped                 rails c
jfrankel&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls
-bash: l: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found

jfrankel&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -v
-bash: uy-: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found

jfrankel&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
NameError: undefined &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;variable or method &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;vei&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; main:Object&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;What it means:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Rails console doesn&#39;t exit cleanly when you use &lt;code&gt;ctrl+z&lt;/code&gt;. This is due to the fact that &lt;code&gt;ctrl+z&lt;/code&gt; doesn&#39;t actually exit a command line program but instead pauses them. Because of this the commands in the terminal get all jumbled up.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How to fix it:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;well&quot;&gt;
  Typing the keyword &lt;code&gt;exit&lt;/code&gt; or using the preferred stop command of &lt;code&gt;ctrl+c&lt;/code&gt; will properly stop rails console, but this is only valid for the next time you run rails console. For now you will have to restart the current terminal session or just close the window and start a new terminal session up.
&lt;/div&gt;


&lt;br /&gt;
&lt;h2 id=&quot;4&quot;&gt;Name Error&lt;/h2&gt;
&lt;hr /&gt;
&lt;h4&gt;&lt;strong&gt;What it looks like:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;NameError at /awards/11
uninitialized constant User::NotificationSetting&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;What it means:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This is a farily straight forward error. Try re-reading the output error message and it starts to make sense. It is saying that there is an uninitalized constant, which could be a class or variable.&lt;/p&gt;
&lt;p&gt;This most likely is a class and or variable name that has a typo in it or doesn&#39;t exist yet in this context.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How to fix it:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;well&quot;&gt;
  Make sure to double check spellings of classes and variables.&lt;br /&gt;&lt;br /&gt;Additionally, something that can trip you up is to make sure the plurality of the constant is correct. Models are singular while controllers are plural.
&lt;/div&gt;
&lt;br /&gt;
&lt;h2 id=&quot;5&quot;&gt;MultiJson::ParseError with cookies&lt;/h2&gt;
&lt;hr /&gt;
&lt;h4&gt;&lt;strong&gt;What it looks like:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;MultiJson::ParseError at /login
Oj::ParseError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;What it means:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This error is indicating that some JSON is not being parsed correctly. In the case of cookies it could mean that the cookie doesn&#39;t exist or is an valid that is not able to be parsed.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How to fix it:&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;well&quot;&gt;
  There are a couple of fixes for this issue. The easiest is to remove all cookies for the domain in question using chrome resource tab inside developer tools. This will force the cookies to be recreated.&lt;br /&gt;&lt;br /&gt;
  Additionally, writing code that gracefully degrades to a default valid value could also fix it. For example adding an empty json array as a backup value as shown below. &lt;code&gt;|| &quot;{}&quot;&lt;/code&gt;
  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preferences&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@_preferences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MultiJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;preferences_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_preference_group&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Do you have a different solution to a common error I&#39;ve listed here? Got another error you keep running into? Leave me a comment below. I&#39;m looking forward to hearing from you.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/fix/recovering-from-common-ruby-on-rails-errors-part-1</link>
            <guid>http://joshfrankel.me/blog/2015/fix/recovering-from-common-ruby-on-rails-errors-part-1</guid>
            <pubDate>Tue, 29 Dec 2015 21:31:03 -0500</pubDate>
        </item>

        <item>
            <title>Accessing instance variables within a Rspec controller test</title>
            <description>&lt;p&gt;If you have ever tried to write functional tests for a controller, you will know that they can be a little tricky. One such trip up point that I ran into was accessing instance variables from within the controller spec. You can&#39;t just use &lt;code&gt;expect(@variable).to be_valid&lt;/code&gt; because &lt;code&gt;@variable&lt;/code&gt; is an instance variable and won&#39;t be defined in your spec&#39;s scope.&lt;/p&gt;&lt;!--more--&gt;

&lt;h3&gt;Rspec and hashes&lt;/h3&gt;
&lt;p&gt;Instead Rails provides a number of hash objects for easier functional testing. To grab the instance variable one only needs to use the following format &lt;code&gt;assigns(:variable)&lt;/code&gt;. This will grab the &lt;code&gt;@variable&lt;/code&gt; from the controller so you can use it in your tests.&lt;/p&gt;

&lt;div class=&quot;well&quot;&gt;
  &lt;p&gt;&lt;strong&gt;More hashes&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;There are a total of 4 hashes that can be utilized in your tests&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;assigns&lt;/strong&gt; - Any objects that are stored as instance variables in actions for use in views.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;cookies&lt;/strong&gt; - Any cookies that are set.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;flash&lt;/strong&gt; - Any objects living in the flash.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;session&lt;/strong&gt; - Any object living in session variables.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;&lt;small&gt;reference:&lt;/small&gt; http://guides.rubyonrails.org/&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Got any tips for working with Rspec controller specs? Leave a comment below.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/tips-and-tricks/accessing-instance-variables-within-a-rspec-controller-test</link>
            <guid>http://joshfrankel.me/blog/2015/tips-and-tricks/accessing-instance-variables-within-a-rspec-controller-test</guid>
            <pubDate>Wed, 11 Nov 2015 21:31:03 -0500</pubDate>
        </item>

        <item>
            <title>The Month in Review: October 2015</title>
            <description>&lt;p&gt;In this first issue of &quot;Month in review&quot;, I will detail a few key topics. In the first section I will list any recent development news that I have come across. The next section will detail any notable gems, extensions, or app. Then in the last section I will list any blog posts from other developers which I have found helpful and informative.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;News&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/&quot; target=&quot;_blank&quot;&gt;Bootstrap 4 is in alpha&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://elementary.io/&quot; target=&quot;_blank&quot;&gt;ElementaryOS released Freya&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;hr /&gt;
&lt;h2&gt;Notable gems, extensions, and apps&lt;/h2&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;Foreman &lt;small&gt;gem&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;https://github.com/ddollar/foreman&quot; target=&quot;_blank&quot;&gt;homepage&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    Running the &lt;strong&gt;rails server, rspec, elasticsearch, mailcatcher, memcached, and fakes3&lt;/strong&gt; at the same time can be quite annoying having to open six terminals. Luckily, &lt;strong&gt;foreman&lt;/strong&gt; allows you to manage your app&#39;s processes in a &lt;code&gt;Procfile&lt;/code&gt;. Once in the &lt;code&gt;Procfile&lt;/code&gt; you can run everything from one terminal just by running &lt;code&gt;foreman start&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;FactoryGirl &lt;small&gt;gem&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_girl&quot; target=&quot;_blank&quot;&gt;homepage&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    Dislike fixtures? If you do then &lt;strong&gt;FactoryGirl&lt;/strong&gt; is for you as it provides dead simple factories for test data.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;Capybara &lt;small&gt;gem&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;https://github.com/jnicklas/capybara&quot; target=&quot;_blank&quot;&gt;homepage&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    Capybara is an easy to use &lt;strong&gt;acceptance testing framework&lt;/strong&gt; that integrates nicely with Rspec.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;Rubocop &lt;small&gt;gem&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;https://github.com/bbatsov/rubocop&quot; target=&quot;_blank&quot;&gt;homepage&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    Is your code a mess? Put &lt;strong&gt;Rubocop&lt;/strong&gt; to work patroling your code. &lt;strong&gt;Rubocop&lt;/strong&gt; enforces many of the community best practices of coding in Ruby. It also has a sublime plugin.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;Brew Bundler &lt;small&gt;extension&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;https://github.com/Homebrew/homebrew-bundle&quot; target=&quot;_blank&quot;&gt;homepage&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    If you are on Mac OSX a your application requires specific libraries for running in development you can utilize &lt;strong&gt;Brew Bundler&lt;/strong&gt; as a way of managing different brew configurations on a per-project basis. Basically identical to how the ruby &lt;code&gt;gemfile&lt;/code&gt; works
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;MapTiler &lt;small&gt;app&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;http://www.maptiler.com/&quot; target=&quot;_blank&quot;&gt;homepage&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    MapTiler provides a ton of custom mapping functionality in a simple to use app. Recently, I have used it on a personal project to overlay map markers onto a popular fantasy book series.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;hr /&gt;

&lt;h2&gt;Recommended blog posts from exceptional people&lt;/h2&gt;
&lt;p&gt;&lt;small&gt;(At authors request I will remove their section)&lt;/small&gt;&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;Fisher-Yates shuffle algorithm &lt;small&gt;Mike Bostock&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;http://bost.ocks.org/mike/shuffle/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    I have been working on a node.js and socket.io card game in my free time and needed a proper way of shuffling a deck of cards. &lt;strong&gt;Mike Bostock&#39;s&lt;/strong&gt; post is probably the best example of how to properly shuffle a deck of cards. He details the process from starting from a simple sorting algorithm up to implementing a full Fisher-Yates sorting algorithm. Additionally, he provides excellent interactive examples that show how the sort moves cards around.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;OOP Javascript &lt;small&gt;JavaScript.isSexy&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;http://javascriptissexy.com/oop-in-javascript-what-you-need-to-know/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    Coming from JavaScript.isSexy, is a post describing how to implement object-oriented programming techniques with javascript. It is worded expertly and provides easy to follow examples. I frequently use it for reference when writing oop javascript.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;Don&#39;t rescue exceptions &lt;small&gt;Daniel Fone&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;http://daniel.fone.net.nz/blog/2013/05/28/why-you-should-never-rescue-exception-in-ruby/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    A great post on the dangers of rescuing the base Exception class in ruby.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;&lt;h4&gt;Testing rails applications &lt;small&gt;Josh Steiner&lt;/small&gt;&lt;/h4&gt;&lt;a href=&quot;https://robots.thoughtbot.com/how-we-test-rails-applications&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;&lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    I love the &lt;strong&gt;Thoughtbot&lt;/strong&gt; blog. These guys always have such awesome information. In this post they detail how they go about testing a rails application. Every facet of what they test is outlined in the article.
  &lt;/div&gt;
&lt;/div&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/month-in-review/the-month-in-review-october-2015</link>
            <guid>http://joshfrankel.me/blog/2015/month-in-review/the-month-in-review-october-2015</guid>
            <pubDate>Sat, 31 Oct 2015 14:29:30 -0400</pubDate>
        </item>

        <item>
            <title>Making the jump to OSX in Sublime Text: keyboard shortcut conversions</title>
            <description>&lt;p&gt;If you are like me and have spent most of your time programming in Linux or Windows, then switching over to OSX can be tricky. Keyboard shortcuts have changed and you have to deal with the placement of that pesky &lt;code&gt;fn&lt;/code&gt; key. I&#39;ve listed below my complete &lt;code&gt;Default (OSX).sublime-keymap&lt;/code&gt; file.&lt;/p&gt;&lt;!--more--&gt;

&lt;p&gt;The keymap file contains many common keyboard shortcut conversions. Most of these deal with switching the &lt;code&gt;apple key&lt;/code&gt; (command key) for the &lt;code&gt;ctrl&lt;/code&gt; key. I&#39;ve made a note at the bottom about the annoying &lt;code&gt;f5&lt;/code&gt; keymapping for sorting a document alphabetically. There is probably a way to remove the original mapping or set it to do nothing, I have tried to use the &lt;code&gt;noop&lt;/code&gt; command. But so far it is still persisting. If anyone knows of a fix I would love to see it in the comments.&lt;/p&gt;

&lt;p&gt;Additionally, I added some layout mappings for some swanky custom layouts.&lt;/p&gt;

&lt;h3&gt;Default (OSX).sublime-keymap&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cut&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;copy&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;paste_and_indent&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;save&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;undo&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+shift+z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;redo&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;find_next&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;find_next&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+shift+g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;find_prev&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shift+f3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;find_prev&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+shift+1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set_layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cols&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cells&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+shift+2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set_layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cols&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cells&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;side-by-side&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;underneath&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+shift+3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set_layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cols&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cells&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;columns&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+shift+5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set_layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cols&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;cells&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;show_overlay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;overlay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;goto&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;show_files&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+shift+p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;show_overlay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;overlay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;command_palette&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+ctrl+p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;prompt_select_workspace&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;show_overlay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;overlay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;goto&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+k&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;run_macro_file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;res://Packages/Default/Delete Line.sublime-macro&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;move_to&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bol&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;move_to&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;eol&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+shift+a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;alignment&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+enter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;run_macro_file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;res://Packages/Default/Add Line.sublime-macro&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+shift+enter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;run_macro_file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;res://Packages/Default/Add Line Before.sublime-macro&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;find_under_expand&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+shift+up&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;swap_line_up&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+shift+down&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;swap_line_down&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;f1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dash_doc&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+shift+super+d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;clone_file&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Duplicate&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;useful&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;looking&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;different&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;places&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;file&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+forward_slash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;toggle_comment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;block&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Attempting&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;shortcut.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;OSX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;workspaces&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;quickly&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;switching&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;sublime&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;pressing&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;lines&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;alphabetically.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;f5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;noop&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+f5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;noop&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shift+ctrl+f5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sort_lines&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;case_sensitive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shift+super+ctrl+f5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sort_lines&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;case_sensitive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/articles/making-the-jump-to-osx-in-sublime-text-keyboard-shortcut-conversions</link>
            <guid>http://joshfrankel.me/blog/2015/articles/making-the-jump-to-osx-in-sublime-text-keyboard-shortcut-conversions</guid>
            <pubDate>Tue, 20 Oct 2015 22:19:31 -0400</pubDate>
        </item>

        <item>
            <title>Drying out your content with Ruby on Rails Internationalization</title>
            <description>&lt;p&gt;Internationalization is an important topic for many corporations that have a multi-national client base. It allows for easy translation capabilities and helps to protect the future of the application against code debt. However, even if you are not providing translations for your application you can still use internationalization to dry up your content. Let&#39;s get started.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3&gt;What is internationalization?&lt;/h3&gt;
&lt;p&gt;Internationalization or (&lt;strong&gt;I18n&lt;/strong&gt; from now on), helps to provide translatable text files in the form of yaml inside the &lt;code&gt;config/locales/&lt;/code&gt; folder. To start your rails application will most likely have something like &lt;code&gt;en.yml&lt;/code&gt;. This allows you to create key value pairs to be used for the English language. The power with &lt;strong&gt;I18n&lt;/strong&gt; is the keys specified can then be matched to another language file as long as the key name corresponds appropriately.&lt;/p&gt;

&lt;blockquote&gt;&lt;strong&gt;Note: &lt;/strong&gt; I18n is an abbreviation for internationalization as well as the class name in Ruby.&lt;/blockquote&gt;

&lt;p&gt;For example you could have a Russian translation file of &lt;code&gt;ru.yml&lt;/code&gt; with a matching key that provides the russian translation as the key. Here it is in code format (Please forgive my Russian translation as I don&#39;t speak Russian and had to use Google translate)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Example of en.yml&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;access_denied&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;You&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;are&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;authorized&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;see&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;page&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Example of ru.yml&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;access_denied&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Вы&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;не&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;авторизованы&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;чтобы&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;увидеть&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;эту&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;страницу&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now anytime a locale change is detected by the &lt;strong&gt;Rails&lt;/strong&gt; app it will switch internationalization files. You can simulate this action in the browser by using a querystring with the locale filename like this &lt;code&gt;?locale=ru&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Why should I use this if I don&#39;t plan on translating anything?&lt;/h3&gt;

&lt;p&gt;I&#39;m glad you asked that. While using &lt;strong&gt;I18n&lt;/strong&gt; for a site that doesn&#39;t require a translation seems like extra work at first it does lead to some good coding practices with keeping your application &lt;strong&gt;DRY&lt;/strong&gt;. First lets talk about how you use &lt;strong&gt;I18n&lt;/strong&gt; before I show you the benefits of it.&lt;/p&gt;

&lt;h4&gt;Using I18n&lt;/h4&gt;

&lt;p&gt;You can utilize your translation files by using the following methods: &lt;code&gt;I18n.t(&#39;key.name.goes.here&#39;)&lt;/code&gt; for &lt;strong&gt;Models&lt;/strong&gt; and &lt;code&gt;t(&#39;the.period.represents.the.colon.from.the.yml.file&#39;)&lt;/code&gt; for &lt;strong&gt;Controllers&lt;/strong&gt; and &lt;strong&gt;Views&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;Simplified: &lt;/strong&gt;By placing these methods in your code you are essentially telling &lt;strong&gt;Rails&lt;/strong&gt;, &quot;Please print the value associated with this key based on my current locale&quot;.&lt;/blockquote&gt;

&lt;h3&gt;The benefit on small applications&lt;/h3&gt;
&lt;p&gt;Take a look at the following controller code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Access denied.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Access denied.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Access denied.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secure_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:notice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;User updated.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Unable to update user.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Access denied.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:notice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;User deleted.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;(Sample property of RailsApps)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;So what&#39;s wrong here?&lt;/p&gt;
&lt;p&gt;There is a lot of duplication in the code. For the purpose of this article just focus on the fact that the line &lt;code&gt;:alert =&gt; &quot;Access Denied.&quot;&lt;/code&gt; appears four times.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;Note: &lt;/strong&gt;There are many other optimizations that could be accomplished including moving duplicate logic into a single method.&lt;/blockquote&gt;
&lt;p&gt;Now multiply that across even a small app and you might have something like 20 instances of the exact same text. What happens if the client wants you to change &lt;strong&gt;&quot;Access Denied&quot;&lt;/strong&gt; to &lt;strong&gt;&quot;I&#39;m sorry dave, but I&#39;m afraid I can&#39;t do that&quot;&lt;/strong&gt;. You better be ready to do a project wide find and replace on your code because you are going to need to change it &lt;strong&gt;20 times!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;However, by using &lt;strong&gt;I18n&lt;/strong&gt; we can significantly cut down on our code debt and future proof your application. Now the above code of &lt;code&gt;:alert =&gt; &quot;Access Denied&quot;&lt;/code&gt; will become &lt;code&gt;:alert =&gt; t(&#39;user.alert.access_denied&#39;)&lt;/code&gt;. Here is what the &lt;strong&gt;en.yml&lt;/strong&gt; file looks like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;access_denied&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Access&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Denied&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when the client request comes in you can simply change your &lt;strong&gt;en.yml&lt;/strong&gt; file to this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;access_denied&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;I&amp;#39;m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sorry&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dave,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;but&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;I&amp;#39;m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;afraid&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;can&amp;#39;t&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;that&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Viola, you just changed 20 different instances of the exact same content from a single location. Bravo!&lt;/p&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/I18n-doge.png&quot; alt=&quot;Generated from dogr.io&quot; /&gt;
&lt;p&gt;The only downside to this method is that you need to type a little more code to display the content. However, even though &lt;code&gt;&quot;Access Denied&quot;&lt;/code&gt; is less typing than &lt;code&gt;t(&#39;user.alert.access_denied&#39;)&lt;/code&gt; by using &lt;strong&gt;I18n&lt;/strong&gt; to &lt;strong&gt;dry&lt;/strong&gt; out your code, it will allow you to have a singularly defined location for content. I don&#39;t know about you but changing code in one place vs 20 is a big time saver.&lt;/p&gt;

&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;I18n&lt;/strong&gt; provides a single location to update content. This reduces code debt.&lt;/li&gt;
  &lt;li&gt;The code is slighly longer&lt;code&gt;:alert =&gt; &quot;Access Denied&quot;&lt;/code&gt; vs. &lt;code&gt;:alert =&gt; t(&#39;users.alert.access_denied&#39;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Models use &lt;code&gt;I18n.t(&#39;key.name&#39;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Controllers and Views use &lt;code&gt;t(&#39;key.name&#39;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Internationalization files are stored in &lt;code&gt;config/locales&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
            <link>http://joshfrankel.me/blog/2015/tips-and-tricks/drying-out-your-content-with-ruby-on-rails-internationalization</link>
            <guid>http://joshfrankel.me/blog/2015/tips-and-tricks/drying-out-your-content-with-ruby-on-rails-internationalization</guid>
            <pubDate>Sat, 03 Oct 2015 15:53:27 -0400</pubDate>
        </item>

        <item>
            <title>How to output a string from the elusive non-output block method; concat</title>
            <description>&lt;p&gt;As a developer, there are many times when printing a value is essential to debugging an application. Sometimes you are unable to use the &lt;code&gt;&lt;%= string %&gt;&lt;/code&gt; output block method.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3&gt;Concat&lt;/h3&gt;
&lt;blockquote&gt;The preferred method of outputting text in your views is to use the &lt;%= “text” %&gt; eRuby syntax. The regular puts and print methods do not operate as expected in an eRuby code block. If you absolutely must output text within a non-output code block (i.e., &lt;% %&gt;), you can use the concat method.&lt;/blockquote&gt;
&lt;p&gt;In other words the concat TextHelper method allows you to output strings within a &lt;% code %&gt; non-output code block. This can be helpful in debbuging by saving some time instead of writing something like this: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Q: What is a Concat?&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A cat who is a con artist&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m pretty sure it&amp;#39;s a country, right?&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;&amp;lt;%= string + &amp;quot;A:&amp;quot; + output %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could instead while debugging or potentially for output reasons (though I wouldn&#39;t recommend it) use the method concat to output the string directly from the &lt;% %&gt; block as so.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Q: What is a Concat?&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;My choice was not 2&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A cat who is a con artist&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;My choice was definitely 2!&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m pretty sure it&amp;#39;s a country, right?&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A:&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although there are plenty of instances where using the concat method could be avoided via other output methods, having an additional tool for non-output blocks can sometimes come in handy.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/how-to/how-to-output-a-string-from-the-elusive-non-output-block-method-concat</link>
            <guid>http://joshfrankel.me/blog/2015/how-to/how-to-output-a-string-from-the-elusive-non-output-block-method-concat</guid>
            <pubDate>Thu, 03 Sep 2015 10:36:16 -0400</pubDate>
        </item>

        <item>
            <title>Restrict an integer to a specific range in Ruby</title>
            <description>&lt;p&gt;Ever wanted an integer to be allowed a specific range of valid numbers rounding when necessary? Well, unfortunately in the Ruby community this has been a point of contention because no built-in function exists. We can however easily replicate the intended behavior through the clever usage of the enumerable sort method.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3&gt;This may be a bit overkill...&lt;/h3&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/clamp-integer-post-clamp.jpg&quot; alt=&quot;Image property of amazon.com&quot; /&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Image property of amazon.com&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Because we want to return an integer that has been &quot;clamped&quot; to a specific range we need a way to set a minimum and maximum value. The Enumerable sort method comes in handy for this purpose. We&#39;ll be using the sort method while grabbing the second element in the returned array to gather the appropriate clamp value.&lt;/p&gt;
&lt;h3&gt;All about sort&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Enumerable#sort&lt;/code&gt; takes an array and attempts to sort the elements either alphabetically or by number unless a custom sort is passed to the block. This allows something like the following to occur.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(rhea kea flea)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&amp;quot;flea&amp;quot;, &amp;quot;kea&amp;quot;, &amp;quot;rhea&amp;quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;well&quot;&gt;&lt;strong&gt;Sort Defined:&lt;/strong&gt;&lt;br /&gt;&quot;Returns an array containing the items in enum sorted, either according to their own &lt;=&gt; method, or by using the results of the supplied block.&quot;&lt;/p&gt;

&lt;p&gt;For the sake of this post we will use the &lt;strong&gt;following integer range of 0 to 10&lt;/strong&gt; to set the min and max values. These values will use the sort method to order them in rising order. I will show a couple examples below to demonstrate how this method works.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty slick looking, albeit a bit cryptic. Never fear it is actually quite simple to explain.&lt;/p&gt;
&lt;p&gt;By using three integers, one of which is our input integer, and then calling sort on them we receive the integers in rising order from lowest to smallest. The trick here is &lt;code&gt;.sort[1]&lt;/code&gt;. This says sort the previous array and return the 2nd element from it. Since arrays start at 0 then &lt;code&gt;[1]&lt;/code&gt; means the second or middle element.&lt;/p&gt;
&lt;p class=&quot;well&quot;&gt;&lt;strong&gt;Clamp Equation:&lt;/strong&gt;&lt;br /&gt;[x, a, b].sort[1] &lt;br /&gt;&lt;br /&gt;x - input&lt;br /&gt;a - minimum value&lt;br /&gt;b - maximum value&lt;/p&gt;

&lt;h3&gt;Disassemble it!&lt;/h3&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/clamp-disassemble.jpg&quot; alt=&quot;Image property of http://genius.com/&quot; /&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Image property of http://genius.com/&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;So now we will always return the proper clamped value. Lets take a look at an example of what is happening. I&#39;ll reuse the first example from above with comments to disassemble what is happening in the intermediate steps.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Usage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Explanation&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [20, 0, 10]  This is what the array looks like in reality&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [0, 10, 20]  What the array looks like after the sort method is called&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# .sort[1] returns 10 because 10 is the second index in the array&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There you have it. A simple and easy way to clamp integers between a range. Also you might be wondering why I keep using the phrase clamp. That is because in other programming languages the clamp method is built-in to accomplish this from the start.&lt;/p&gt;

&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Here it is in method form for easy copy and pasting.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/how-to/restrict-an-integer-to-a-specific-range-in-ruby</link>
            <guid>http://joshfrankel.me/blog/2015/how-to/restrict-an-integer-to-a-specific-range-in-ruby</guid>
            <pubDate>Wed, 08 Jul 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Rails 4 turbolinks fix for jQuery only working after hard refresh</title>
            <description>&lt;p&gt;The Rails asset pipeline uses a feature called Turbolinks for serving faster CSS and JS assets to the browser. It works by using AJAX to re-load assets without refreshing the page. Unfortunately, it also can mess up scripts that work with the document ready event such as jQuery. The only way to make the assets work is with a hard refresh. Let&#39;s fix this.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Luckily for us the fix for this issue is fairly simple, though towards the bottom of the documentation. &lt;strong title=&quot;Step 1&quot;&gt;First&lt;/strong&gt; we need to add a new gem to our Gemfile &lt;code&gt;gem &#39;jquery-turbolinks&#39;&lt;/code&gt; to add jQuery support for Turbolinks. Make sure to run &lt;code&gt;bundle&lt;/code&gt; to reload your gems.&lt;/p&gt;
&lt;p&gt;&lt;strong title=&quot;Step 2&quot;&gt;Next&lt;/strong&gt; we need to add the jquery-turbolinks files into our &lt;mark&gt;application.js&lt;/mark&gt; asset load order. Make sure to place &lt;code&gt;//= require jquery.turbolinks&lt;/code&gt; exactly after &lt;code&gt;//= require jquery&lt;/code&gt; and before &lt;code&gt;//= require turbolinks&lt;/code&gt; for this to work correctly.&lt;/p&gt;
&lt;h4&gt;Application.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turbolinks&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jquery_ujs&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprockets&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turbolinks&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;require_tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong title=&quot;Step 3&quot;&gt;Lastly&lt;/strong&gt;, make sure to stop any running instances of the Rails server to reload your assets and environment. Then just restart the server with &lt;code&gt;rails s&lt;/code&gt;. At this point everything should be up and running smoothly again.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/fix/rails-4-turbolinks-fix-for-jquery-only-working-after-hard-refresh</link>
            <guid>http://joshfrankel.me/blog/2015/fix/rails-4-turbolinks-fix-for-jquery-only-working-after-hard-refresh</guid>
            <pubDate>Wed, 24 Jun 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>How to configure Sublime Text 3 for Rubocop and Ruby coding standards</title>
            <description>&lt;p&gt;As far as standards go PHP has PSR, python has PEP and Ruby has..? Well, ruby doesn&#39;t really have an established best practices and standards document like the other two languages. Luckily, we do have two excellent coding guides and a gem little called Rubocop that help fill the gap.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;Thanks to the awesome work of Bozhidar Batsov and many talented folks, we have an unofficial &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Ruby&lt;/a&gt; and &lt;a href=&quot;https://github.com/bbatsov/rails-style-guide&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Rails&lt;/a&gt; coding standards documentation. These are great resources for when you have questions concerning object oriented programming design challenges. Additionally, they also built the super useful &lt;strong&gt;Rubocop&lt;/strong&gt; gem for automating style checks.&lt;/p&gt;

&lt;p&gt;I suggest that you read through, or at least skim through, some of the suggested standards. These were created by some of the top people in the industry and are really great for becoming a &lt;strong&gt;Ruby&lt;/strong&gt; master. Some of the standards proposed can be directly translated into a Sublime Text configuration file which we will now begin to build.&lt;/p&gt;

&lt;h3&gt;&quot;You have the right to remain silent.&quot; &lt;small&gt;Multiple Sublime configurations&lt;/small&gt;&lt;/h3&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/robocop-right-to.jpg&quot; alt=&quot;Image property of http://www.telegraph.co.uk/&quot; title=&quot;Image property of http://www.telegraph.co.uk/&quot; /&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Image property of http://www.telegraph.co.uk/&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Since, most developers are more or less polyglot&#39;s when it comes to programming languages, separating our different coding standards becomes a must. Fortunately, for us Sublime Text 3 has a nifty feature for creating syntax specific user configuration files.&lt;/p&gt;
&lt;p&gt;Under the preferences menu in the &lt;strong&gt;Settings - More&lt;/strong&gt; menu you will see the option for &lt;strong&gt;Syntax Specific&lt;/strong&gt; user configuration. By selecting this option Sublime Text will take your currently active file&#39;s code syntax and create a config file specific to it (e.g. JSON.sublime-settings). This file will then only be applicable to files that are also using this language syntax.&lt;/p&gt;
&lt;p&gt;Create the ruby specific user configuration by clicking the &lt;strong&gt;Syntax Specific - User&lt;/strong&gt; option and then renaming the file to &lt;code&gt;Ruby.sublime-settings&lt;/code&gt;. Once created we can now start following the proposed Ruby style guide.&lt;/p&gt;

&lt;h3&gt;&quot;Serve the public trust, protect the innocent, uphold the law.&quot; &lt;small&gt;Ruby Proposed Standards&lt;/small&gt;&lt;/h3&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/robocop-uphold-law.jpg&quot; alt=&quot;Image property of http://www.salon.com/&quot; title=&quot;Image property of http://www.salon.com/&quot; /&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Image property of http://www.salon.com/&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;This section includes the cherry-picked settings that can be configured in your &lt;code&gt;Ruby.sublime-settings&lt;/code&gt; file. These will help bring your coding environment one step closer to being a highly efficient and up to standards workflow.&lt;/p&gt;

&lt;h4&gt;&quot;Use UTF-8 as the source file encoding.&quot;&lt;/h4&gt;
&lt;p&gt;Using the UTF-8 file encoding is pretty much a standard for most files.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;default_encoding&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&quot;Use Unix-style line endings.&quot;&lt;/h4&gt;
&lt;p&gt;Like I mentioned in my other article, &lt;a href=&quot;http://joshfrankel.me/blog/2014/how%20to/How-to-configure-sublime-text-for-psr-standards/&quot;&gt;How to configure Sublime Text for PSR Standards&lt;/a&gt;, utilizing unix line endings helps to keep all developers on the same page when using version control.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;default_line_ending&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unix&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&quot;Limit lines to 80 characters.&quot;&lt;/h4&gt;
&lt;p&gt;By setting the ruler to 80 and word wrap to true, we can impose a soft limit of 80 characters on a file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;rulers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;word_wrap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&quot;End each file with a newline.&quot;&lt;/h4&gt;
&lt;p&gt;Enough said.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;ensure_newline_at_eof_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&quot;Use two spaces per indentation level (aka soft tabs). No hard tabs.&quot;&lt;/h4&gt;
&lt;p&gt;Unlike the PHP world of 4 spaces, Ruby developers generally use 2 spaces for indentation. I find this leads to more compact and readable code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;tab_size&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;translate_tabs_to_spaces&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&quot;Avoid trailing whitespace.&quot;&lt;/h4&gt;
&lt;p&gt;Another setting that teams of developers will all need to use to avoid git conflicts. Kill the whitespace!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Final Ruby.sublime-settings file&lt;/h4&gt;
&lt;p&gt;I&#39;ve listed the completed &lt;code&gt;Ruby.sublime-settings&lt;/code&gt; file for easy copy-pasting. Enjoy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;default_encoding&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;default_line_ending&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;ensure_newline_at_eof_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;rulers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;tab_size&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;translate_tabs_to_spaces&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;word_wrap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;Ruby&lt;/strong&gt; style guide has many more standards and best practices contained within it. Some of which we won&#39;t be able to configure via a simple settings file. Good thing we have the awesome gem &lt;strong&gt;Rubocop&lt;/strong&gt; to tell us how to fix our code.&lt;/p&gt;

&lt;h3&gt;&quot;They&#39;ll fix you. They fix everything.&quot; &lt;small&gt;Rubocop&lt;/small&gt;&lt;/h3&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/robocop-enters.jpg&quot; alt=&quot;Image property of http://geektyrant.com/news/top-10-movie-quotes-from-robocop&quot; /&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Image property of http://geektyrant.com/news/top-10-movie-quotes-from-robocop&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;In addition to the standards documents, the team behind them also created the &lt;strong&gt;Rubocop&lt;/strong&gt; gem. &lt;strong&gt;Rubocop&lt;/strong&gt; is like the ruby linter on steroids as it churns through your code unapologetically telling you what needs to be fixed according to the unofficial coding standards. Similiar to PHP&#39;s PSR-fixer, &lt;strong&gt;Rubocop&lt;/strong&gt; can be setup to run in the background or manually at your leisure.&lt;/p&gt;

&lt;p&gt;In order to start using &lt;strong&gt;Rubocop&lt;/strong&gt; on your projects, first you need to install the gem with &lt;code&gt;gem install rubocop&lt;/code&gt;. Once installed, I prefer to use the &lt;code&gt;Sublimelinter-rubocop&lt;/code&gt; Sublime package to handle running &lt;strong&gt;Rubocop&lt;/strong&gt; in the background. As per usual install it via Sublime&#39;s package manager system. Finally, with both the gem and package ready to go, add a file called &lt;code&gt;.rubocop.yml&lt;/code&gt; in the root directory of your project. It should contain the following code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;AllCops&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;RunRailsCops&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells &lt;strong&gt;Rubocop&lt;/strong&gt; to in addition to running the regular Ruby style cops (syntax checkers) to also run the Rails cops as well. You can find additional documentation on Sublimelinter-rubocop &lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-rubocop&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; and &lt;strong&gt;Rubocop&lt;/strong&gt; itself documentation &lt;a href=&quot;https://github.com/bbatsov/rubocop&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&quot;Thank you for your co-operation. Good night.&quot;&lt;/h3&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/robocop-thanks.jpg&quot; alt=&quot;Image property of http://images.fandango.com/images/fandangoblog/&quot; title=&quot;Image property of http://images.fandango.com/images/fandangoblog/&quot; /&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Image property of http://images.fandango.com/images/fandangoblog/&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;All Robocop quotes aside, by using the above setup you can prevent some of the common syntax pitfalls with Ruby. In addition to the automated setup reading the two unofficial guides can be a lifesaver in determining what method to use or how to structure an application.&lt;/p&gt;
&lt;p&gt;Was there an additional setting I missed? How about another tool or gem you use to help you follow standards? Maybe a completely different standard? I would love to hear about them in a comment below. Justice has been served.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/how-to/how-to-configure-sublime-text-3-for-rubocop-and-ruby-coding-standards</link>
            <guid>http://joshfrankel.me/blog/2015/how-to/how-to-configure-sublime-text-3-for-rubocop-and-ruby-coding-standards</guid>
            <pubDate>Mon, 15 Jun 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Getting up and Running with Minitest, Guard, Sass, and Bootstrap for Ruby on Rails Development</title>
            <description>&lt;p&gt;I&#39;ve always felt that getting up and running with a new web development project should be as easy as possible. A good example of this is a Rails app. As Ruby on Rails accomplishes a high degree of ease of use straight out of the box, this article will focus on setting up an automated testing environment and sprucing up your CSS with bootstrap-sass.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;I&#39;m going to assume that you already have the following items installed: &lt;mark&gt;Ruby on Rails&lt;/mark&gt; and &lt;mark&gt;Git&lt;/mark&gt;. You will need both of these before going further into this setup.&lt;/p&gt;

&lt;h3&gt;The Gemfile&lt;/h3&gt;
&lt;p&gt;The first thing we need to do is add all the necessary gems. The bootstrap-sass gem neatly encapsulates most of the configuration for us with a small config caveat that I will go into later. To get smooth automated testing up and running with Minitest we need a number of other gems.&lt;/p&gt;

&lt;p&gt;Add the following to your Gemfile. Once added we need to run &lt;code&gt;bundle install&lt;/code&gt; to install the newly added gems.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bootstrap-sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;3.3.3&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;minitest-reporters&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.0.10&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mini_backtrace&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.3&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;libnotify&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.9.1&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Optional notification plugin for linux&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;guard&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.11.1&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Guard task runner&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;guard-minitest&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.4.3&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Guard minitest support&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spring&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.2.0&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Optional testing server for guard&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the gems now installed it&#39;s time to start configuring them with our environment. Let&#39;s first deal with our Bootstrap-sass configuration.&lt;/p&gt;

&lt;h3&gt;Bootstrap-sass&lt;/h3&gt;
&lt;p&gt;As I mentioned earlier, the gem will do most of the work for us. If you look at /app/assets/javascripts/application.js and /app/assets/stylesheets/application.css you should see some comments that say &lt;code&gt;//= require bootstrap-sprockets&lt;/code&gt;. For our application.js file we can leave these alone as they will work as expected. However, with Sass files the problem with the comments is that not only does it include our new bootstrap-sass gem but they also load all .css or .scss files in the assets/stylesheets directory. This makes it problematic for spliting Sass files into partials as the order they are included isn&#39;t specific.&lt;/p&gt;
&lt;p&gt;To fix this we need to remove all the comments from application.css. Also make sure that you rename the file to application.css.scss to use the sass file ending (or .sass if you like the indent version). Once the comments are removed and the file renamed we can now use Sass&#39;s built in @import statement to structure our files however we want. While we do lose the ability to automatically load all the stylesheets at once we are now able to load them with their partials in the proper order. It should look like the following code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// We need to manually import the bootstrap-sass gem Sass files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bootstrap-sprockets&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bootstrap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Add your Sass files here or just write sass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have a working system for including Sass files and partials in a specific order. Sass is excellent at compiling multiple @imports together so no need to worry about the site running slower. Additionally, since we used the gem it has the Bootstrap framework built-in which is awesome!&lt;/p&gt;

&lt;h3&gt;Minitest&lt;/h3&gt;
&lt;p&gt;There are a lot of different testing solutions for using Rails. You have Rspec, Cucumber, Test::Unit, and Minitest. &lt;strong&gt;Rspec&lt;/strong&gt; is really powerful but can be quite tricky to get working right. &lt;strong&gt;Cucumber&lt;/strong&gt; is great for its easy to read tests that could allow your clients to write the application specs as tests. For starting out though I would recommend &lt;strong&gt;Minitest&lt;/strong&gt; because of how easy it is setup and also that it is the preferred unit testing framework packaged with Rails.&lt;/p&gt;
&lt;p&gt;There are two gems from the Gemfile section that are associated with getting minitest looking sweet: &lt;strong&gt;minitest-reporters&lt;/strong&gt;, and &lt;strong&gt;mini_backtrace&lt;/strong&gt;. Minitest reporters adds hooks for better display output from tests. Mini backtrace add supports for backtrace cleaner to prevent really long error messages while running your test suite.&lt;/p&gt;

&lt;p&gt;To setup &lt;strong&gt;minitest-reporters&lt;/strong&gt; open your test_helper.rb file and add the following code above the line &lt;code&gt;class ActiveSupport::TestCase&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;minitest/reporters&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next &lt;strong&gt;mini_backtrace&lt;/strong&gt; needs the following code added to it. This will suppress some messages regarding rvm in the console. You may need to adjust this depending on your Rails environment setup (rvm or rbenv).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backtrace_cleaner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_silencer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/rvm/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Awesome! You can now run tests on your app with clean output using &lt;code&gt;rake test&lt;/code&gt;. Of course manually running tests is so un-hip so let&#39;s setup our automated testing suite with Guard.&lt;/p&gt;

&lt;h3&gt;Automated testing: Guard&lt;/h3&gt;
&lt;p&gt;Guard is an awesome event handler for the command line. Built in native ruby it integrates well into the Rails workflow. Setting up Guard is pretty easy just run &lt;code&gt;guard init minitest&lt;/code&gt; to create a basic Minitest Guardfile.&lt;/p&gt;
&lt;p&gt;The Guardfile is similiar to gulp or grunt in that it watches for particular events to occur and then performs an action. Your Guardfile should looking something like the following code&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:minitest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;all_on_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;all_after_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# with Minitest::Unit&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^test/(.*)\/?test_(.*)\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^lib/(.*/)?([^/]+)\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^test/test_helper\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Rails 4&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^app/(.+)\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                               &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_test.rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^app/controllers/application_controller\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test/controllers&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^app/controllers/(.+)_controller\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test/integration/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_test.rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^app/views/(.+)_mailer/.+}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test/mailers/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_mailer_test.rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^lib/(.+)\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                               &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test/lib/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_test.rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^test/.+_test\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^test/test_helper\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically we have all the particular watched files within the guard block. These will essentially fire off your unit tests depending on which files are being modified. To start Guard just run &lt;code&gt;guard&lt;/code&gt; in the terminal from your Rails project directory. It will take a few seconds and then should start polling for events. Super handy and cuts down on the time it takes to manually run unit tests. The only issue is that the test suite runs really, really slowly. This is where the Spring preloader gem comes in handy by reducing the execution time of your test suite.&lt;/p&gt;
&lt;h3&gt;Spring&lt;/h3&gt;
&lt;p&gt;Spring is a preloader meaning that your application assets will become loaded before your tests so that Guard doesn&#39;t need to re-build them everytime you run your test suite. The reduction in run time can be quite impressive from 5 seconds to almost instantaneously. Spring with Guard makes Test-Driven Development a dream. To setup Spring you first need to add Spring to your app&#39;s executables by running &lt;code&gt;bundle exec spring binstub --all&lt;/code&gt;. Next make sure the Spring attribute is marked as true in your Guardfile.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:minitest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all_on_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all_after_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have all the basics of a proper automated testing environment setup. System notifications in the next section add another layer of convenience with testing.&lt;/p&gt;
&lt;h3&gt;Notifications&lt;/h3&gt;
&lt;p&gt;Having notifications from your test suite is just another way to increase your productivity by not having to pull up terminal every 5 seconds. Since I am using Linux the gem I choose was &lt;strong&gt;Libnotify&lt;/strong&gt; to add notifications. There are a number of different &lt;strong&gt;system notifiers&lt;/strong&gt;. To find out which one is available for your OS check out the &lt;a href=&quot;https://github.com/guard/guard/wiki/System-notifications&quot; target=&quot;_blank&quot;&gt;system notifications faq page&lt;/a&gt;. This page also includes install instructions or further documentation pages.&lt;/p&gt;

&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;Lastly, is version control. It is recommended to follow the useful gitignore file located &lt;a href=&quot;https://github.com/github/gitignore&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for your programming language. Look at the ruby and rails sections for preferred ignored files. Additionally, since we are using Spring for preloading make sure to ignore spring files by adding &lt;code&gt;/spring/*.pid&lt;/code&gt; to your .gitignore file. Here is a basic .gitignore file below&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# See https://help.github.com/articles/ignoring-files for more about ignoring files.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# If you find yourself ignoring temporary files generated by your text editor&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or operating system, you probably want to add a global ignore instead:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   git config --global core.excludesfile &amp;#39;~/.gitignore_global&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Ignore bundler config.&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/.bundle&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;# Ignore the default SQLite database.&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/*.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlite3&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/db/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlite3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;journal&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Ignore all logfiles and tempfiles.&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/log/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/log/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/tmp&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;# Ignore Spring files.&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/*.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Ignore secrets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you have it! A fully functional Ruby on Rails environment utilizing the bootstrap front-end framework with sass, an automated testing suite with Guard, Minitest, Spring, and System notifications, and a ready to go Git setup. This is a great starting place for new Rails applications. Have a suggestion or comment? Leave me a comment below.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/how-to/getting-up-and-running-with-minitest-guard-sass-bootstrap-for-ruby-on-rails-development</link>
            <guid>http://joshfrankel.me/blog/2015/how-to/getting-up-and-running-with-minitest-guard-sass-bootstrap-for-ruby-on-rails-development</guid>
            <pubDate>Wed, 03 Jun 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Grunt.js or How I learned to Stop Worrying and Automate Everything.</title>
            <description>&lt;p&gt;There are a number of tools from the web development community that are designed to make your life a whole lot easier. One such type of tool are automation tools or task runners. The three biggest players I have come across are Guard, Gulp, and Grunt.js. We will be diving into Grunt.js for the remainder of this article.&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class=&quot;center-block image-holder-300&quot;&gt;
    &lt;img src=&quot;http://joshfrankel.me/blog/img/2015/grunt-logo.png&quot; alt=&quot;Grunt.js Logo all rights reserved to http://gruntjs.com/&quot; /&gt;
    &lt;p&gt;&lt;small&gt;Logo property of http://gruntjs.com/&lt;/small&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Build Tools&lt;/h3&gt;
&lt;p&gt;While I can&#39;t speak on behalf of Gulp, I have used both Guard and Grunt.js in my projects. In one of my earlier posts (&lt;a href=&quot;http://joshfrankel.me/blog/2013/series/leveling-up-css-with-sass-basics-setup-part-1/&quot;&gt;Leveling up CSS with Sass&lt;/a&gt;) I mentioned the usage of Guard for compiling Sass files. For this purpose it is really useful but I have found that Grunt.js is just a little easier for me. I still use Guard for Rails based projects though as it integrates well.&lt;/p&gt;

&lt;p&gt;Now before I begin to explain how to setup Grunt.js lets conceptualize what we wish to accomplish from the final configuration. We want a Grunt.js build system that has automatically loaded plugins, an easy way of maintaining tasks, and external plugin configurations. Over the next couple sections I will detail how we can get such a grunt setup working. Additionally, for developers new to Grunt this article will serve as a crash course into the world of task runners.&lt;/p&gt;
&lt;nav class=&#39;well&#39;&gt;
&lt;strong&gt;Sections&lt;/strong&gt;
&lt;a href=&quot;#setup-node&quot;&gt;Step 1: Setup Node.js&lt;/a&gt;
&lt;a href=&quot;#basic-gruntjs&quot;&gt;Step 2: Basic Grunt.js Setup&lt;/a&gt;
&lt;a href=&quot;#gruntfile&quot;&gt;Step 3: Configure the Gruntfile.js&lt;/a&gt;
&lt;a href=&quot;#optimize-structure&quot;&gt;Step 4: Optimize Gruntfile.js with load-grunt-config&lt;/a&gt;
&lt;/nav&gt;
&lt;h3 id=&quot;setup-node&quot;&gt;Setup Node.js&lt;/h3&gt;
&lt;p&gt;Before we can begin using grunt you need to first make sure you have node installed so we can use &lt;acronym title=&quot;Node Package Manager&quot;&gt;npm&lt;/acronym&gt;. NPM is like &lt;a href=&quot;https://rubygems.org/&quot; target=&quot;_blank&quot;&gt;Ruby Gems&lt;/a&gt;, &lt;a href=&quot;https://getcomposer.org/&quot; target=&quot;_blank&quot;&gt;Composer&lt;/a&gt;, or &lt;a href=&quot;http://bower.io/&quot; target=&quot;_blank&quot;&gt;Bower&lt;/a&gt;, in that it manages specific packages for your project.&lt;/p&gt;
&lt;p&gt;To install node, download the proper version based on your OS from &lt;a href=&quot;http://nodejs.org/download/&quot; title=&quot;Node Download Page&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Once installed run the following initialize command in the project directory from your terminal. &lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will walk you through creating a package.json file that contains all the necessary project information. Just use the defaults for the purposes of this article. Once completed you will be ready to move onto the next step.&lt;/p&gt;

&lt;h3 id=&quot;basic-gruntjs&quot;&gt;Basic Grunt.js Setup&lt;/h3&gt;
&lt;p&gt;Just like step one we need to install grunt, which is made trivial now that have npm installed. Run the following command to install grunt as a devDependency (--save-dev). &lt;code&gt;npm install grunt --save-dev&lt;/code&gt;. If your system balks then try running the command as &lt;code&gt;sudo&lt;/code&gt;. The format of &lt;code&gt;npm install [grunt-plugin] --save-dev&lt;/code&gt; is generally the easiest way to install plugins. Additionally, a devDependency is just a way of letting npm know that the plugin or module is only required for the development environment.&lt;/p&gt;
&lt;p&gt;Install a few more plugins on your own for Grunt.js&#39;s usage. &lt;strong&gt;grunt-contrib-watch&lt;/strong&gt;, &lt;strong&gt;grunt-notify&lt;/strong&gt;, &lt;strong&gt;grunt-contrib-compass&lt;/strong&gt;. Watch looks for file directory changes, notify displays growl like notifications to your OS, and compass compiles sass and adds compass features.&lt;/p&gt;
&lt;p class=&#39;well&#39;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br /&gt; You will need to run the above plugins in the standard npm install [plugin-name] --save-dev format&lt;/p&gt;
&lt;p&gt;Next we will need to create a basic Gruntfile.js. Every Grunt.js project requires this file as well as the above package.json file. Here is a sample to copy/paste into your project. Name the file Gruntfile.js and place into your base directory&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Project configuration.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Loading of plugins&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-watch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-notify&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Default task(s).&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gruntfile&quot;&gt;Configure the Gruntfile.js&lt;/h3&gt;
&lt;p&gt;There are three basic parts to each Gruntfile: loading plugins, task definitions, and configurations. Loading just places plugins into the grunt. Tasks are basically a chain of actions that can be called. And configurations set up external data and internal plugins.&lt;/p&gt;
&lt;h4&gt;Loading plugins&lt;/h4&gt;
&lt;p&gt;The loading of plugins is really quite simple. After install a plugin you just use the built in function loadNpmTasks to load the plugin into your grunt file for usage. If you are thinking to yourself, &quot;There has got to be an easier way to load plugins&quot;, you would be correct. I will discuss an improved plugin loading method in &lt;a href=&quot;#optimize-structure&quot;&gt;Step 4&lt;/a&gt;. Here is a sample of code from above showing this section.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Loading of plugins&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-watch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-notify&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Configurations&lt;/h4&gt;
&lt;p&gt;Configurations are the soldiers of Grunt.js. They do exactly as they are told and nothing else.&lt;/p&gt;
&lt;p&gt;The main configuration is created through the usage of the initConfig configuration object. This allows you to pass in external values and plugin configurations. For instance we placed &lt;code&gt;pkg: grunt.file.readJSON(&#39;package.json&#39;)&lt;/code&gt; in the above code. This reads our package.json file created from &lt;code&gt;npm init&lt;/code&gt; and places it into the config variable pkg.&lt;/p&gt;

&lt;p&gt;I&#39;ve provided a simple configuration for notify, watch, and compass below. Take a close look at the notify configuration and you will notice the string &lt;code&gt;Hello there &lt;%= pkg.name %&gt;&lt;/code&gt;. This outputs, &quot;Hello there test&quot; in my case, we setup for pkg when we read in the package.json file. Pretty cool right?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Watch plugin config&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;compass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;**/*.scss&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;compass:compile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Notify plugin config&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello there &amp;lt;%= pkg.name %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Note we are outputting the package.json name variable here&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My name is Grunt&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Just another notify config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I will be important later on&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Compass plugin config&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;compass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;sassDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;cssDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configurations are setup by listing the task name, which is generally the plugin name like notify or watch, followed by the target and then the options. In the case of the grunt-notify plugin, notify is the task name (not to be confused with tasks coming up later), welcome is the target, and options are specific to the plugin and grunt. The task and target can actually be named whatever you want as long as the they are called correctly in the task definition.&lt;/p&gt;
&lt;p&gt;We can actually bring up terminal and run &lt;code&gt;grunt notify:welcome&lt;/code&gt; and it will start grunt looking for a task name of notify with a target of welcome. Assuming grunt-notify is setup correctly (outside scope of this article) you should get something like this.&lt;/p&gt;
&lt;img src=&quot;http://joshfrankel.me/blog/img/2015/grunt-notify.png&quot; alt=&quot;Grunt notify display&quot; /&gt;
&lt;p&gt;Congratulations, you have just run your very first grunt task, albeit somewhat lengthly and not really automated yet. Don&#39;t worry we will fix that soon.&lt;/p&gt;
&lt;p class=&quot;well&quot;&gt;&lt;strong&gt;Cool Trick:&lt;/strong&gt;&lt;br /&gt; Try running just &lt;code&gt;grunt notify&lt;/code&gt; without the target. It will run both notify:welcome and notify:another. Essentially running any target under the notify task.&lt;/p&gt;

&lt;h4&gt;Tasks&lt;/h4&gt;
&lt;p&gt;The task is essentially an order the commander (you) gives. The order outlines which platoon (target configurations) should go to the battlefield to run their attack plans.&lt;/p&gt;
&lt;p&gt;In other words, a task is at its most basic a shortcut to run a list of configurations. Tasks are loaded by using the function &lt;code&gt;grunt.registerTask(&#39;shortcutName&#39;, [&#39;runFirst&#39;, &#39;runSecond&#39;]);&lt;/code&gt;. It includes the task name or as I like to call it the shortcut, followed by a list of tasks to run in a specific order.&lt;/p&gt;
&lt;p&gt;So how would we setup a task that would run the welcome target from notify and afterwards run the compile target for compass? It would probably look something like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;custom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;notify:welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;watch:compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code now lets us just run &lt;code&gt;grunt custom&lt;/code&gt; and now it will fire off the list of tasks being notify:welcome first followed by watch:compass second. This is a simple example of chaining tasks together.&lt;/p&gt;
&lt;p&gt;Additionally, the registerTask function has a lot of power in it. It can run a callback method or anonymous function like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;custom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;notify:welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;watch:compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Just a simple debug to console command&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Allowing you to create some extra functionality where a task would be unnecessary. It is certainly helpful in debugging more advanced setups. At this point your Gruntfile should look like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Project configuration.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Watch plugin config&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;compass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;**/*.scss&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;compass:compile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Notify plugin config&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello there &amp;lt;%= pkg.name %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Note we are outputting the package.json name variable here&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My name is Grunt&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Just another notify config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I will be important later on&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Compass plugin config&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;compass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;sassDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;cssDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Loading of plugins&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-watch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-notify&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Default task(s).&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Our custom task with callback&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;custom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;notify:welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;watch:compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Just a simple debug to console command&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is nothing wrong with this setup. It is actually totally functionally and usable at this point. However, say we were to add 3 or 4 more tasks and 3 or 4 more plugins. You can imagine that this file can get quite big in a hurry. This leads us to the next step which is to abstract some the logic to make it cleaner to manage multiple plugins and multiple tasks.&lt;/p&gt;
&lt;h3 id=&quot;optimize-structure&quot;&gt;Optimize Gruntfile.js with load-grunt-config&lt;/h3&gt;
&lt;p&gt;There are a number of popular plugins out there to help organize Gruntfile&#39;s. The one I always kept running into was &lt;code&gt;load-grunt-tasks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Load grunt tasks automatically loads all of your plugins. So instead of typing grunt.loadNpmTasks(&#39;...&#39;); half a hundred times you would just use a single line of code &lt;code&gt;require(&#39;load-grunt-tasks&#39;)(grunt);&lt;/code&gt;. While this is really useful it unfortunately still leaves the configuration settings in the Gruntfile which is typically the bulk of the content.&lt;/p&gt;
&lt;h4&gt;Enter load-grunt-config&lt;/h4&gt;
&lt;p&gt;Load grunt config takes the awesome loading cabilities of load-grunt-tasks and adds the ability to abstract configurations and task defintions to external files. This makes managing your Grunt setup a lot easier. Run the following to install it &lt;code&gt;npm i --save-dev load-grunt-tasks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We now can use a better folder structure for our grunt plugin configurations. Load-grunt-config enables the usage of a folder called grunt/ where you can now place files where the file name is actually the taskname.&lt;/p&gt;
&lt;p&gt;For example lets abstract the notify logic into its own file called &lt;strong&gt;notify.js&lt;/strong&gt; inside the &lt;strong&gt;grunt/&lt;/strong&gt; folder. It should look like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Variables, Custom tasks, Etc....&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Return the configurations&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello there &amp;lt;%= pkg.name %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Note we are outputting the package.json name variable here&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My name is Grunt&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Just another notify config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I will be important later on&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see we have now removed the configuration logic from the main Gruntfile into a plugin specific file. Now it is much easier to maintain plugin options and settings without having to search for them.&lt;/p&gt;
&lt;p&gt;Next we can abstract task definitions into a special file within the grunt folder called &lt;strong&gt;aliases.yaml&lt;/strong&gt;. This file allows you to easily define task lists.&lt;/p&gt;
&lt;p class=&quot;well&quot;&gt;&lt;strong&gt;Quick Tip:&lt;/strong&gt;&lt;br /&gt;
The aliases file also support js, json, coffee as well as the above yaml.
&lt;/p&gt;
&lt;p&gt;Lets take a look at what our aliases file should look like after abstracting out our tasks. It should look pretty simple in comparison.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;notify:welcome&amp;#39;&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;notify:welcome&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;watch:compass&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So lets see what we have accomplished so far. We have setup node as well as grunt. There were a number of grunt plugins installed as devDependencies. All grunt plugins are automatically loaded via load-grunt-config. And finally we have abstracted our plugin configurations and task definitions into separate files.&lt;/p&gt;
&lt;p&gt;We now have a highly efficient grunt setup configured. Adding new tasks and/or plugins should be a breeze from here on forward. I highly suggest looking more into &lt;a href=&quot;https://github.com/firstandthird/load-grunt-config&quot; target=&quot;_blank&quot;&gt;load-grunt-config&lt;/a&gt; as there are a number of features to making your life easier in the world of task runners.&lt;/p&gt;
&lt;p&gt;Did I miss something? Have a favorite grunt plugin? I would love to hear your feedback and comments.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2015/tutorials/gruntjs-or-how-i-learned-to-stop-worrying-and-automate-everything</link>
            <guid>http://joshfrankel.me/blog/2015/tutorials/gruntjs-or-how-i-learned-to-stop-worrying-and-automate-everything</guid>
            <pubDate>Wed, 18 Feb 2015 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>Leveling up CSS with Sass (Advanced Techniques - Part 2)</title>
            <description>&lt;p&gt;Since the last Sass article in this series was published over a year ago, here is a quick refresher. We covered the setup of Sass apps including: Guard, Compass, Prepross, and Scout. There was also info on variables and rule nesting. And we talked about why Sass is so awesome. In this article we are going to go through some more advanced techniques specifically: Functions, Mixins, Placeholders, Parent selector, Calculations, and conditional statements.&lt;/p&gt;
&lt;!--more--&gt;

&lt;blockquote&gt;This is the second article in the series.
    &lt;nav&gt;
        &lt;a href=&quot;http://joshfrankel.me/blog/2013/series/leveling-up-css-with-sass-basics-setup-part-1/&quot;&gt;Part 1 - Basics&lt;/a&gt;
        &lt;a href=&quot;#&quot;&gt;Part 2 - Advanced Techniques&lt;/a&gt;
    &lt;/nav&gt;
&lt;/blockquote&gt;

&lt;p&gt;At its core, the goal of Sass is to avoid repetitive CSS styles. One efficient Sass practice is the use of variables which allow for a single location, or source of truth, on specific styles or values. These variables are easily reusable across multiple files. The next step to removing repetition in your styles is through the use of functions, mixins, and placeholders. These techniques allow you to use large blocks of code without duplicating it.&lt;/p&gt;

&lt;h3&gt;Functions, Mixins, and Placeholders. What is the difference?&lt;/h3&gt;
&lt;p&gt;Before we get into the differences lets get into a quick review of what each one is. If you have ever used a backend programming language like php or rails, then you already know the &lt;em&gt;function&lt;/em&gt; of functions. If this is a new concept for you, then a function basically performs an operation and then explicitly returns a value for usage. Think of it like the addition button on a calculator. Mixins are very similar to functions except they do not have to explicitly return a value. They can instead return Sass styles directly to the file. Essentially a Mixin can output multiple styles within a selector while a function can only return a single value. Placeholders are a little more tricky. A placeholder provides a style or group of styles that can be extended or &lt;em&gt;included&lt;/em&gt; into other styles. Let&#39;s take some time and break down each of these further.&lt;/p&gt;

&lt;h4&gt;Functions&lt;/h4&gt;
&lt;p&gt;As I mentioned before a function must explicitly return a value. Functions use the keyword &lt;code&gt;@return&lt;/code&gt; to define what value is being output. When building a function a good rule to follow is that it should only perform a single operation or action. An example would be calculating a letter-spacing, a single CSS value, from a Photoshop design. A function that is specific can be used across more projects. Functions can also optionally take arguments as seen below &lt;code&gt;($value)&lt;/code&gt;. These instance variables can then be used within the function. Functions are called just by using the declared function name in this instance &lt;code&gt;letter-spacing(50)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Letter spacing function declaration&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Function accepts a value and then calculates the letter-spacing in em units&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @author Josh Frankel &amp;lt;josh@joshfrankel.me&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;letter-spacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If the letter-spacing $value is negative&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Convert to negative and then change unit type to em&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If the letter-spacing $value is equal to zero&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@else&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// return value unaltered&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Else the $value must be positive&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Calculate the letter-spacing and change unit to em&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Example Styles&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Call the letter-spacing function and pass in 50 as the $value&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* The calculated letter spacing */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.05em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the function above I have also used conditional statements in the form of &lt;code&gt;@if&lt;/code&gt;, &lt;code&gt;@else if&lt;/code&gt;, and &lt;code&gt;@else&lt;/code&gt;. These work in the same manner as other languages and allow for more functionality.&lt;/p&gt;
&lt;p&gt;Additionally, the function uses standard operators to perform math calculations. If you look at this line of code &lt;code&gt;@return ($value / 1000) * 1em;&lt;/code&gt; it follows the order of operations with the parenthesis to find the correct letter-spacing value. The &lt;code&gt; * 1em&lt;/code&gt; at the end of the line is a trick to convert a non-unit value into a unit of your choice.&lt;/p&gt;

&lt;h4&gt;Mixins&lt;/h4&gt;
&lt;p&gt;Mixins share a very similiar responsibility as functions do. They essentially could be used the same way, e.g. you could build a Mixin that outputs single value. The difference here is that Mixins don&#39;t use the &lt;code&gt;@return&lt;/code&gt; keyword and Mixins can directly output styles when the are included into your Sass.&lt;/p&gt;
&lt;p&gt;Additionally like functions, Mixins can also accept arguments, which allow for some added functionality. To call a Mixin you use the &lt;code&gt;@include&lt;/code&gt; keyword and then the mixin name. To declare a Mixin you use the &lt;code&gt;@mixin&lt;/code&gt; keyword followed by any arguments.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Pseudo Content Mixin&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Allows for easy pseudo elements&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @author Josh Frankel &amp;lt;josh@joshfrankel.me&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; pseudo-content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pseudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Make sure the parent is relative or else we will be positioning&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// absolute for the pseudo element on the page width&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// String interpolation and parent selector&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pseudo&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url($url)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Example usage&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt; pseudo-content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;before&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;images/icon-twitter.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* The mixin creates both of these rules by being placed inside .sidebar */&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/* The parent selector output */&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(images/icon-twitter.png)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is an important line in the pseudo-content Mixin that I glossed over. If you look at the code &lt;code&gt;&amp;:#{$pseudo} {&lt;/code&gt; it seems like a bunch of gibberish. I&#39;ve actually utilized two Sass features on the same line: string interpolation and the parent selector.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;String Interpolation&lt;/strong&gt; is a method of outputting a value or variable so that Sass doesn&#39;t perform any operations on it. This is useful for inputting names into selectors as I have done above. The portion of the code &lt;code&gt;#{$pseudo}&lt;/code&gt; says output the &lt;code&gt;$pseudo&lt;/code&gt; variable directly at this location. So &lt;code&gt;#{$pseudo} {&lt;/code&gt; is equal to &lt;code&gt;before {&lt;/code&gt;. Since the original variable for $pseudo was a string, using string interpolation removes this formatting allowing us to use it as a selector.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;parent selector&lt;/strong&gt; is the first part of the line &lt;code&gt;&amp;:&lt;/code&gt; which tells the proceeding selector that it is the child of the current selector. Essentially, &lt;code&gt;.sidebar&lt;/code&gt; is the parent selector so calling &lt;code&gt;&amp;:#{$pseudo}&lt;/code&gt; says that the new selector is the child of &lt;code&gt;.sidebar&lt;/code&gt; and has a string interpolated variable as its name. The parent selector is not limiting to pseudo classes, you can also use &lt;code&gt;&amp;.some-class-name&lt;/code&gt; or &lt;code&gt;&amp;:hover&lt;/code&gt; for child classes and child pseudo selectors respectively.&lt;/p&gt;

&lt;h4&gt;Placeholders&lt;/h4&gt;
&lt;p&gt;Placeholders are basically super classes in CSS. Unlike, Mixins and Functions, placeholders do not allow for arguments to be passed in. They do directly output styles similar to Mixins. Placeholders are declared by using a &lt;code&gt;%&lt;/code&gt; symbol and are called using the &lt;code&gt;@extend&lt;/code&gt; keyword. Take a look at the below example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.color-red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could now declare html elements with the class of &lt;code&gt;.color-red&lt;/code&gt; to make their font color red. This could then be reused on any number of elements. The downside is that we need to actually place this into the html. Sass solves this issue through Placeholders. Additionally by using Placeholders all the styles that extend them will be placed together into a single rule.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Flexible Images&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;flexible-images&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Example calls to the placeholder&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;flexible-images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;flexible-images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.menu&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;flexible-images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* All styles are combined since they all use the same placeholder */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.menu&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see above the placeholder combines all the styles using the current placeholder into a single rule. This drastically reduces the amount of CSS your webpage will be loading. Also you no longer have to keep adding classes to the html as you can now just write Sass. There are some bugs with using placeholder and media queries but the newer version of Sass should fix these.&lt;/p&gt;
&lt;h3&gt;Wrap up&lt;/h3&gt;
&lt;p&gt;I have talked about the differences of Functions, Mixins, and Placeholders. We have seen the power in using parent selectors and the utility of string interpolation. We briefly went over math calculations and how they follow the order of operations like other programming languages. In my next article we will step away from style techniques and focus on project and file organization.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2014/series/Leveling-up-css-with-sass-advanced-techniques-part-2</link>
            <guid>http://joshfrankel.me/blog/2014/series/Leveling-up-css-with-sass-advanced-techniques-part-2</guid>
            <pubDate>Tue, 22 Jul 2014 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>How to configure Sublime Text for PSR Standards</title>
            <description>&lt;p&gt;Created by the &lt;acronym title=&quot;PHP Framework Interoperability Group&quot;&gt;PHP-FIG&lt;/acronym&gt;, the PSR specification is a unified push to create standards across all PHP projects.  The committee is formed from over 20 developers representing some of the most popular frameworks.  Having a unified standard has been a much needed endeavor since PHP standards have been somewhat lacking in the past.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3&gt;Sublime Text - User Settings&lt;/h3&gt;

&lt;p&gt;While some of the proposed standards tell you how to format code, we can configure some of the more basic options directly into Sublime.  First off if you don&#39;t yet know how to modify your Sublime settings got to &lt;code&gt;Preferences -&gt; Settings-User&lt;/code&gt;.  You should always modify the &quot;User&quot; files in Sublime because the default files will be overwritten with each new update.&lt;/p&gt;

&lt;h4&gt;&quot;Code MUST use 4 spaces for indenting, not tabs.&quot;&lt;/h4&gt;
&lt;p&gt;Since PSR states we must use spaces, we need to make sure that when we press the tab key it is translated to spaces.  Additionally, since all of our tabs are now spaces setting the tab size to 4 will actually set the amount of spaces to 4.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;tab_size&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;translate_tabs_to_spaces&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&quot;There MUST NOT be a hard limit on line length; the soft limit MUST be 120 characters; lines SHOULD be 80 characters or less.&quot;&lt;/h4&gt;
&lt;p&gt;The rulers options allows you to place lines in the editor at the 80 and 120 character marks.  Word wrap will not impose a hard limit.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;rulers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;word_wrap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h4&gt;&quot;All PHP files MUST use the Unix LF (linefeed) line ending.&quot;&lt;/h4&gt;
&lt;p&gt;If your company is using git and the developers have both Mac and Windows systems, you can save yourself a ton of headaches by making sure everyone is using Unix line endings.  This prevents the file from changing line ending type and misleading git into thinking that every single line has changed between commits.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;default_line_ending&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h4&gt;&quot;All PHP files MUST end with a single blank line.&quot;&lt;/h4&gt;
&lt;p&gt;This one is pretty self explanatory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;ensure_newline_at_eof_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h4&gt;&quot;There MUST NOT be trailing whitespace at the end of non-blank lines.&quot;&lt;/h4&gt;
&lt;p&gt;This is another all or nothing option if your company is using git.  Some editors will place spaces at the end of non-blank lines.  PSR states that there should be no whitespace on these lines.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So with all these options placed into your &lt;code&gt;User - Settings&lt;/code&gt; file you have a good baseline for transitioning into using PSR.  Before starting this make sure that you have all developers on board especially if you are using git.  Additionally, I highly recommend reading the full documentation of the standards which you can find at the &lt;a href=&quot;http://www.php-fig.org/&quot;&gt;php-fig website&lt;/a&gt;.  For easy copy-pasting, here is the final settings file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;default_line_ending&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;ensure_newline_at_eof_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;rulers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;tab_size&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;translate_tabs_to_spaces&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;word_wrap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a future post I plan on delving into the PHP Code Sniffer plugin which can be used for automatically converting files to PSR standards.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2014/how-to/How-to-configure-sublime-text-for-psr-standards</link>
            <guid>http://joshfrankel.me/blog/2014/how-to/How-to-configure-sublime-text-for-psr-standards</guid>
            <pubDate>Tue, 01 Jul 2014 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Guard fix for could not start Spork server for Rspec</title>
            <description>&lt;p&gt;While working through the expertly written &lt;a href=&quot;http://www.railstutorial.org/book&quot;&gt;&quot;The Ruby on Rails Tutorial&quot;&lt;/a&gt; by Michael Hartl, I ran into a small configuration issue.  The issue I experienced was with Guard not properly starting a Spork server from the command line.  My system was able to run Rspec, Spork, and Guard with no errors as long as Guard didn&#39;t try to load Spork.  Here is what my terminal output looks like.&lt;/p&gt;&lt;!--more--&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;josh@Josh-eOS:~/Web/Freelance/qstate$&lt;/span&gt; guard
&lt;span class=&quot;go&quot;&gt;15:28:49 - INFO - Guard is using Libnotify to send notifications.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;15:28:49 - INFO - Guard is using TerminalTitle to send notifications.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;15:28:49 - INFO - Starting Spork for RSpec, Test::Unit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Couldn&amp;#39;t find a supported test framework that begins with &amp;#39;testunit&amp;#39;&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Supported test frameworks:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;( ) Cucumber&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(*) RSpec&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Legend: ( ) - not detected in project   (*) - detected&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Using RSpec, Rails&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Preloading Rails environment&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Loading Spork.prefork block...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Spork is ready and listening on 8989!&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;15:29:19 - ERROR - Could not start Spork server for RSpec, Test::Unit after 30 seconds. I will continue waiting for a further 60 seconds.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&#39;m positive that others have experienced this same error.  The hint for the fix comes from the lines &lt;code&gt;15:28:49 - INFO - Starting Spork for RSpec, Test::Unit.  Couldn&#39;t find a supported test framework that begins with &#39;testunit&#39;&lt;/code&gt;.  This means that Guard was attempting to run tests using the testunit framework (which was not installed).  To fix this add &lt;code&gt;:test_unit =&gt; false&lt;/code&gt; to your Guardfile&#39;s Spork block.  It should look something like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spork&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test_unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cucumber_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RAILS_ENV&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rspec_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RAILS_ENV&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Additional Issues&lt;/h3&gt;
&lt;p&gt;For troubleshooting surrounding Guard and Spork, take a look at the &lt;a href=&quot;https://github.com/guard/guard-spork&quot;&gt;github page&lt;/a&gt; for guard-spork.  Here are a couple of the most basic things you can check.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;ul&gt;
        &lt;li&gt;If you can start Spork manually but get the following error message when using Guard::Spork:&lt;/li&gt;
        &lt;li&gt;Starting Spork for RSpec ERROR: Could not start Spork for RSpec/Cucumber. Make sure you can use it manually first.&lt;/li&gt;
        &lt;li&gt;Try to increase the value of the :wait =&gt; 60 option before any further investigation. It&#39;s possible that this error is the result of an unnecessary /test directory in the root of your application. Removing the /test directory entirely may resolve this error.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
            <link>http://joshfrankel.me/blog/2014/fix/how-to-fix-could-not-start-spork-server-for-rspec</link>
            <guid>http://joshfrankel.me/blog/2014/fix/how-to-fix-could-not-start-spork-server-for-rspec</guid>
            <pubDate>Sat, 07 Jun 2014 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>5 Ways to improve your development workflow</title>
            <description>&lt;p&gt;When I was in college learning about web development back in 2005 (yeesh), I was always looking for the perfect method of programming. At first I thought &quot;if I can only find the perfect way of doing this, I&#39;ll never have to learn it again&quot;. Of course with web development and life, perfection should only ever be a direction not an ending. Let me explain.&lt;/p&gt;&lt;!--more--&gt;

&lt;p&gt;If you have ever seen the movie Fight Club, you know the in which the narrator lists all the recently destroyed things in his apartment to his friend, Tyler. Furniture, rugs, kitchenware, a Yin-Yang table. He says &quot;I was close to being complete.&quot;. A little while later Tyler responds, &quot;...I say never be complete, I say stop being perfect, I say let... lets evolve...&quot;. The point being that freeing yourself from perfection allows for some powerful growth and evolution of your process. The following tips will help you evolve your own process.&lt;/p&gt;

&lt;h3&gt;Have the courage to shred your process&lt;/h3&gt;
&lt;p&gt;Did you just learn about css pre-processors? Are you using object oriented programming? That&#39;s awesome... now find another technique and integrate it. Too many times in the past have I talked to developers who are afraid of changing their process. With every project try a new process or skill. Being unafraid to try a technique allows you to continuously grow as a professional. This will keep you up to date on the latest technological advances, and also avoids complacency with your current skills.&lt;/p&gt;
&lt;p&gt;Another benefit to this approach is it keeps you constantly marketable. Would you rather hire a developer who has been using the same process since 1999 or one who just evolved (I feel a pokemon joke here)? Employers can view this as a serious limitation in terms of overall knowledge and web competency.&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;Method 1: &lt;/strong&gt;Add a new skill on every project to encourage growth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Work smarter not harder&lt;/h3&gt;
&lt;p&gt;By following this line of thinking you can safely eliminate a lot of learning that has already been done for you. Using plugins, frameworks, and &lt;a href=&quot;www.stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; can make short work of many common web tasks. These items were built because somebody somewhere thought, &quot;if only there was an easier way&quot;. Instead of trying to reinvent the wheel with each task, find a solution that exists and is flexible. This allows you to focus on higher level problem solving instead of getting distracted with the small details. &lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;Method 2: &lt;/strong&gt;Focus on the higher level problem and utilize existing solutions from the community to reduce distractions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Learn about your tools&lt;/h3&gt;
&lt;p&gt;Probably the most important tool you have is your text editor. But how much do you really know about your text editor? Can it do version control or unit testing without the command line? Can it write custom macros or scripts to automate common tasks?&lt;/p&gt;
&lt;p&gt;Learning the inner workings of this tool can lead to some drastic changes in process. For example, I use Sublime Text as my text editor of choice. A while back I received a file that had converted 4 spaces to 2 tabs. Since this would have made version control throw a fit, I decided to write a simple macro to convert tabs into spaces and then down to 4 spaces. I can now reuse this bit of code with my editor anytime I happen upon this problem. To write the macro I had to first understand the documentation and syntax. By learning the tool I had drastically reduced the amount of effort I would need in the future.&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;Method 3: &lt;/strong&gt;Learn everything you can about your tools to enhance your productivity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Only add value&lt;/h3&gt;
&lt;p&gt;I took this method from Lean Manufacturing which states that, &quot;...the expenditure of resources for any goal other than the creation of value for the end customer [is] wasteful...&quot;. The work you are doing should always add value to the product. If what you are doing isn&#39;t adding any end value then it may be time to reevaluate why it is necessary. Try thinking about how many keystrokes it can take to build a webpage. Now multiply those by how many projects you do in a year. If you have 5 keystrokes that don&#39;t add value and you can eliminate them think how much time you would have saved over the entire year.&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;Method 4: &lt;/strong&gt;Create things that only add value to the end product.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Automate everything! Let the machines rule&lt;/h3&gt;
&lt;p&gt;The more things you can automate the less work you end up having to do. This gives your brain a break allowing it to focus on more pressing tasks. Are you manually compressing and concatenating your javascript files? Why not try using Guard or Grunt to automatically do it for you? Are you using git on a dev site but don&#39;t want to manually do &lt;code&gt;git pull&lt;/code&gt; on the live site? There are dozens of ways to save steps and time through automation. Need more examples and info? Check out my upcoming series Automation: Let the machines rule. &lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;Method 5: &lt;/strong&gt;Automate your workflow as much as possible to free up brain power.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you have another method that I missed? Disagree with letting machines take over the world? Share your thoughts below.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2014/articles/5-ways-to-improve-your-development-workflow</link>
            <guid>http://joshfrankel.me/blog/2014/articles/5-ways-to-improve-your-development-workflow</guid>
            <pubDate>Tue, 03 Jun 2014 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>And we're back. A new look</title>
            <description>&lt;p&gt;It has been a long time since I last posted a new article here. The blog had to take a backseat momentarily to allow me to redesign both it and my portfolio. The goal for these two sites was to implement and learn new technologies and development trends.&lt;/p&gt;&lt;!--more--&gt;
&lt;p&gt;In the professional web development world, keeping up with the newest trends can be quite time consuming. There are about a hundred different frameworks, boilerplates, and plugins that come out every year. Part of the process that I take when selecting a new technology is first to research it and then determine if the product it will produce fits the project needs.&lt;/p&gt;
&lt;p&gt;For instance with the blog, I was previously running it on Wordpress. While there is nothing wrong with running a blog with Wordpress, in fact most do, I always got the feeling that Wordpress was like dropping a bomb on an ant. It will get the job done but in some instances is overkill. All of the additional plugins, settings, and the ridiculous database structure just left a bad taste in my mouth. That&#39;s when I started to research alternative blogging platforms.&lt;/p&gt;
&lt;p&gt;I finally came accross Jekyll, which emphasizes static pages over dynamic. There is no database, no additional files loaded, and no bloated code; just the raw html pages for your posts. For the purpose of this blog Jekyll works great allowing me to quickly write new posts directly in my text editor and additionally having the benefit of faster load times due to the pages being static. For larger sites I would still probably go with using Wordpress, but for a small development blog Jekyll works perfectly.&lt;/p&gt;
&lt;p&gt;In addition to using Jekyll I wanted to implement a website using only Bootstrap as the front-end framework. Everything on both my portfolio and blog use bootstrap as the core. I also wanted to get familiar with using Grunt.js. I had been using Guard in the past to do pre-processor compiling, but Grunt seemed to have much more of a community surrounding it. I find the documentation and implementation for Grunt.js much easier to understand and troubleshoot so far than Guard.&lt;/p&gt;
&lt;p&gt;Giving yourself challenges when you work on personal projects is a perfect way to learn new material. My goal is to always add 1 new technique / technology per project that I have no knowledge of and integrate it into my workflow. If it helps me to be more efficient on the project then I&#39;ll place it permanently into my workflow.&lt;/p&gt;
&lt;p&gt;For this site I specifically challenged myself to learn and use the following technologies.&lt;/p&gt;
&lt;h3&gt;Technology Goals: &lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Bootstrap&lt;/strong&gt;: The site will only utilize Bootstrap for CSS/SASS styles. No other css libraries or frameworks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;: The site will use Jekyll for blogging instead of Wordpress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grunt.js&lt;/strong&gt;: Was integrated into my workflow for compiling and concatenation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With the new Jekyll structure for the blog in place and my portfolio finished you can expect to see new blog posts coming up on a regular basis.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2014/articles/and-were-back-a-new-look</link>
            <guid>http://joshfrankel.me/blog/2014/articles/and-were-back-a-new-look</guid>
            <pubDate>Tue, 29 Apr 2014 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Leveling up CSS with Sass (Basics &amp; Setup - Part 1)</title>
            <description>&lt;p&gt;In this series of articles, I will go through the ends and out of Sass. I will focus on the Basics and Setup, Advanced Techniques, Project Organization, and Best Practices and Common Pitfalls. I would like to apologize now for all the terrible puns that will come up (Sass tends to lend itself well to them)&lt;/p&gt;&lt;!--more--&gt;

&lt;blockquote&gt;This is the first article in the series.
    &lt;nav&gt;
        &lt;a href=&quot;#&quot;&gt;Part 1 - Basics&lt;/a&gt;
        &lt;a href=&quot;http://joshfrankel.me/blog/2014/series/Leveling-up-css-with-sass-advanced-techniques-part-2/&quot;&gt;Part 2 - Advanced Techniques&lt;/a&gt;
    &lt;/nav&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright so now lets dive into Sass. But before we start writing code, what the heck is Sass anyway?&lt;/p&gt;
&lt;h3&gt;What is this Sass you speak of?&lt;/h3&gt;
&lt;p&gt;Sass or Syntactically Awesome Stylesheets, is pre-processor language for adding functionality and flexibility to CSS. A pre-processor is just a fancy way of saying that this code will be compiled in a syntax that is usable to another language, CSS in this case. More simply Sass adds variables, functions (mixins), inheritance, and nesting to make CSS awesome again.&lt;/p&gt;

&lt;p&gt;There are two types of sass syntax: indent-based (.sass) and traditional braces (.scss). I will be using the traditional style as it is closer to vanilla CSS. Indent-based might be more familiar to users of python and ruby.&lt;/p&gt;
&lt;h3&gt;Why should I use it?&lt;/h3&gt;
&lt;p&gt;There are plenty of reasons to use Sass. The biggest advantage is the sheer amount of re-usability of style code. On top of this for you people who love to super organize your code Sass has an awesome @import rule that doesn&#39;t slow down page load. Here are just a few awesome advantages of using a pre-processor language.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Functions (mixins)&lt;/li&gt;
	&lt;li&gt;Variables&lt;/li&gt;
	&lt;li&gt;Nesting Inheritance&lt;/li&gt;
	&lt;li&gt;@import rules that rule!&lt;/li&gt;
	&lt;li&gt;Project Organization&lt;/li&gt;
	&lt;li&gt;Unit Calculations (2px * 2px = 4px)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting excited to start using Sass? Well then lets setup our dev environment.&lt;/p&gt;
&lt;h3&gt;Set it up!&lt;/h3&gt;
&lt;p&gt;There are number of excellent apps and command line processes for setting up a sass environment. So depending on your comfort level you can decide which option is the best fit for you.&lt;/p&gt;

&lt;p&gt;All compilers for Sass follow the same process. The compiler runs a polling process that checks for file changes. When a Sass file is updated all files that are affected by it are compiled into CSS. Instantaneous compiling.&lt;/p&gt;

&lt;p&gt;In addition to checking for file changes and compiling the output CSS many of the compilers feature additional options such as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debug mode&lt;/strong&gt; - When enabled it will create comments in the compiled CSS that refer to the location they are created in the Sass. This is especially useful given that Sass compilers have a couple different compiler output methods&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output Style&lt;/strong&gt; - There are four different output styles: Nested, Expanded, Compact and Compressed. Nested is the default and will properly indent nested styles. Expanded is exactly like vanilla CSS. Compact makes each rule take up a single line. Compressed removes all white space and essentially minifies the output.&lt;/p&gt;
&lt;blockquote&gt;&quot;Scout is a cross-platform app that delivers the power of Sass &amp;amp; Compass into the hands of web designers.&quot;&lt;/blockquote&gt;
&lt;p&gt;Scout is probably the quickest and most painless way of setting up a Sass development environment. The Scout app is an adobe air application that you run on your desktop which contains all the necessary files for compiling Sass specific code.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Download &lt;a href=&quot;http://mhs.github.io/scout-app/&quot;&gt;Scout&lt;/a&gt; and install it&lt;/li&gt;
	&lt;li&gt;Create a new project by clicking the plus sign&lt;/li&gt;
	&lt;li&gt;Set the new project to your top most project directory&lt;/li&gt;
	&lt;li&gt;Edit the project&#39;s input (Sass file locations) and output (CSS file locations) folder settings&lt;/li&gt;
	&lt;li&gt;Press the play button on the project and get Sassy!&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Alternatives&lt;/strong&gt;: &lt;a href=&quot;http://alphapixels.com/prepros/&quot;&gt;Prepros&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;blockquote&gt;&quot;Guard is a command line tool to easily handle events on file system modifications.&quot;&lt;/blockquote&gt;
&lt;p&gt;Guard is my preferred method of compiling Sass files. It runs in the command line with a few simple commands. Things to note is you need a working installation of ruby, ruby gems, and guard before you can use guard-sass. However, once setup it integrates nicely with growl or notification apps.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Install ruby&lt;/li&gt;
	&lt;li&gt;Run gem install guard&lt;/li&gt;
	&lt;li&gt;Run gem install guard-sass&lt;/li&gt;
	&lt;li&gt;Run guard init in your project directory&lt;/li&gt;
	&lt;li&gt;Edit the Guardfile according to the &lt;a href=&quot;https://github.com/hawx/guard-sass&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Run guard inside the directory and enjoy&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Alternatives&lt;/strong&gt;: &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt;

&lt;p&gt;So now that we have our Sass environment setup we can start actually utilizing the pre-processor. Make sure your method of compiling Sass is active before the next steps&lt;/p&gt;
&lt;h3&gt;$heading: &quot;Variables&quot;;&lt;/h3&gt;
&lt;p&gt;Lets take a look at Sass variables. These are the easiest to understand and use. Variables are defined by using a dollar sign($) to denote the start of them. A colon(:) is then used to separate the variable name from its value.&lt;/p&gt;

&lt;p&gt;One of the great things about Sass is that it doesn&#39;t try to reinvent the syntax of CSS. It just extends it the make it more powerful&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Variables look like php except we use colon(:) instead of =&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;$dark-blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#1e427c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;    :&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#7fb636&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A style using a variable&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dark-blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$green&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; * This is the compiled CSS code&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#1e4s7c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#7fb636&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There it is, Sass at its most basic. By defining a variable before at the beginning of a file it can be reused later to create DRY code.&lt;/p&gt;
&lt;h3&gt;Nesting {&lt;small&gt;nesting&lt;/small&gt;}&lt;/h3&gt;
&lt;p&gt;Nesting in Sass works logically and just makes sense.  By placing rules inside one another they inherit their parent rule selectors. By nesting Sass rules you also give yourself a visual cue for selectors that are further down in the DOM.&lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; While nesting selectors is awesome, don&#39;t get carried away with them. If a single class selector will suffice there is no need to nest it within html body etc. Too much nesting will create unnecessary code bloat.&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Top level nested style&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.twitter-feed&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Inner nested&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.heading&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verdana&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#525252&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Inner Inner nested&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#00FF00&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.twitter-feed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.twitter-feed&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.heading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verdana&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.twitter-feed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#525252&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.twitter-feed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#00FF00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By this point you have setup a Sass environment and created your very first Sass file. In the &lt;strong&gt;next article&lt;/strong&gt; I will go through more advanced techniques for using Sass including mixins, string interpolation, placeholders, extending, and calculations.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2013/series/leveling-up-css-with-sass-basics-setup-part-1</link>
            <guid>http://joshfrankel.me/blog/2013/series/leveling-up-css-with-sass-basics-setup-part-1</guid>
            <pubDate>Thu, 20 Jun 2013 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Reload favicon in Chrome Browser</title>
            <description>&lt;p&gt;Chrome likes to hold onto old favicons.  Hard refreshing, clearing dns, etc don&#39;t seem to do anything to update them.  However, there is a fairly simple way to force a refresh.&lt;/p&gt;&lt;!--more--&gt;
&lt;p&gt;All you have to do is type the favicon&#39;s url into the browser `www.website.com/images/favicon.ico&#39; and have the browser load it (ctrl+f5).  It will then automatically download the favicon, which you can delete if you want.  Finally, without changing url locations, execute a refresh and the favicon should update for you.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2013/articles/reload-favicon-in-chrome-browser</link>
            <guid>http://joshfrankel.me/blog/2013/articles/reload-favicon-in-chrome-browser</guid>
            <pubDate>Wed, 12 Jun 2013 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>5 Useful CSS shorthand properties that every Web Developer should know</title>
            <description>&lt;p&gt;I believe Jeffrey Way has a quote somewhere that goes like, &lt;mark&gt;&quot;think about the developer who can save a couple seconds on a task. At the end of the year he will have accomplished that much more than the developer who didn&#39;t&quot;.&lt;/mark&gt; If you have begun to streamline your process learning shorthand css is one method for increasing efficiency.&lt;/p&gt;&lt;!--more--&gt;
&lt;h3&gt;1. Background&lt;/h3&gt;
&lt;p&gt;A staple of every web developer&#39;s css tool kit. 99% of websites will require the use of this property, making it an excellent way to reduce time on task. I seem to use this type of shorthand whenever I am using a sprites image file.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;background:&lt;/strong&gt; [background-color] [background-image] [background-repeat] [background-attachment] [background-position];&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.bg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#323232&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(../images/layout/sprites.png)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;scroll&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. Font&lt;/h3&gt;
&lt;p&gt;Probably my favorite css shorthand property. Combines everything you need to style a font. Super quick and concise format. The only thing it doesn&#39;t include is letter-spacing.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;font:&lt;/strong&gt; [font-style] [font-variant] [font-weight] [font-size]/[line-height] [font-family];&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;italic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;small-caps&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;23px&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SophiaProLight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verdana&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. Margin / Padding&lt;/h3&gt;
&lt;p&gt;A truly tricky shorthand property. This is one I still get mixed up.&lt;/p&gt;

&lt;p&gt;The format goes as such: margin-top margin-right margin-bottom margin-left. If you think about the short hand like the face of a clock and imagine the clock starting at 12 this becomes a whole lot easier.&lt;/p&gt;

&lt;p&gt;However, there are three additional short hand properties. For all sides at once you just specify one measurement (margin: 15px). For the same measurement on top / bottom and right / left you specify just two measurements starting with the top / bottom (padding: 7px 5px).&lt;/p&gt;

&lt;p&gt;And now for the tricky one. If your left / right sides are the same measurement but the top / bottom are different you specify top measurment, followed by the joint left / right measurement, and finish with the bottom measurement (margin: 10px 20px 13px). Check the example below as I have shown with code all methods.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;margin:&lt;/strong&gt; [margin-top] [margin-right] [margin-bottom] [margin-left];&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* Top Right Bottom Left */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/* Top &amp;amp; Bottom  Left &amp;amp; Right */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c&quot;&gt;/* Top Right &amp;amp; Left Bottom */&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;c&quot;&gt;/* All four sides */&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. Border&lt;/h3&gt;
&lt;p&gt;Similar to the margin / padding shorthand, you can declare all sides of a border with one declaration. However, unlike margin / padding this is the only format for the border shorthand.  Addtionally, properties such as border-width, border-style, and border-color can be combined into a single line.&lt;/p&gt;

&lt;blockquote&gt;&lt;strong&gt;border:&lt;/strong&gt; [border-width] [border-style] [border-color];&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5. List&lt;/h3&gt;

&lt;p&gt;This is lesser used shorthand property for styling ordered and unordered lists.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;list-style:&lt;/strong&gt; [list-style-type] [list-style-position] [list-style-image];&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;disc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.gif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Box Shadow&lt;/h3&gt;
&lt;p&gt;While this is not a shorthand property, box-shadow&#39;s default format is very akin to earlier css shorthand properties.&lt;/p&gt;

&lt;blockquote&gt;&lt;strong&gt;box-shadow:&lt;/strong&gt; [horizontal-length] [vertical-length] [blur] [spread] [color] [inset]&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.69&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
            <link>http://joshfrankel.me/blog/2013/techniques/5-useful-css-shorthand-properties-that-every-web-developer-should-know</link>
            <guid>http://joshfrankel.me/blog/2013/techniques/5-useful-css-shorthand-properties-that-every-web-developer-should-know</guid>
            <pubDate>Fri, 22 Feb 2013 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>How to use CSS3 gradients with background images</title>
            <description>&lt;p&gt;Using the background property in css you can specify a background image and a css3 gradient. This is particularly useful for png icons on top of gradients. In this instance the icon has a transparent background and is placed on top of the css3 gradient.&lt;/p&gt;&lt;!--more--&gt;

&lt;p&gt;The proper format is background: &lt;code&gt;[background-image], [background-gradient]&lt;/code&gt;.
&lt;blockquote&gt;&lt;strong&gt;Quick Tip:&lt;/strong&gt; The comma tells CSS &quot;Hey! There is a secondary rule, display it also.&quot;&lt;/blockquote&gt;
&lt;p&gt;When working with gradients, or CSS3 properties in general, it is important to specify a fallback style. In this case a standard background image and color should suffice.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* Fallback css for browsers that don&amp;#39;t support gradients */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/images/sprites.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-260px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-134px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ae4446&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; * CSS generated from ultimate css gradient generator&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; * www.colorzilla.com/gradient-editor&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; **/&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/images/sprites.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-260px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-134px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-moz-linear-gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ae4446&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#9b262b&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* FF3.6+ */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/images/sprites.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-260px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-134px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-webkit-gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;color-stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#ae4446&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;color-stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#9b262b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Chrome,Safari4+ */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/images/sprites.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-260px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-134px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-webkit-linear-gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ae4446&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#9b262b&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Chrome10+,Safari5.1+ */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/images/sprites.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-260px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-134px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-o-linear-gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ae4446&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#9b262b&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Opera 11.10+ */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/images/sprites.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-260px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-134px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-ms-linear-gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ae4446&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#9b262b&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* IE10+ */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/images/sprites.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-260px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-134px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;linear-gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ae4446&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#9b262b&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* W3C */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A great resource for building CSS3 Gradients is &lt;a href=&quot;www.colorzilla.com/gradient-editor&quot;&gt;Ultimate CSS Gradient Generator&lt;/a&gt;. It will generate proper styles for the gradients in all major browsers along with fallback styles for older ones.  All you have to do is add the first line for the background image url and you are good to go.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2013/how-to/how-to-use-css3-gradients-with-background-images</link>
            <guid>http://joshfrankel.me/blog/2013/how-to/how-to-use-css3-gradients-with-background-images</guid>
            <pubDate>Sat, 02 Feb 2013 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>Should I use px or ems for css font-size? Neither, use rem!</title>
            <description>&lt;p&gt;While setting the size of a font is relatively simple; choosing the unit of measuring the size can become complex quickly.&lt;/p&gt;

&lt;p&gt;At their core there are two types of font-size units; relative and absolute. Relative units are calculated by their parent element&#39;s font-size while absolute units are set at a fixed value. Both types of units are useful.&lt;/p&gt;&lt;!--more--&gt;

&lt;p&gt;I often will use both px and em for font-size but recently in CSS3 development there has been a new unit. This unit is called &lt;a href=&quot;#rem&quot;&gt;rem&lt;/a&gt; or root em unit and allows for far greater flexibility with typography.&lt;/p&gt;
&lt;h3&gt;Units for Special Cases&lt;/h3&gt;
&lt;p&gt;..Unless you have a good reason for using these, there are far more efficient and easy to understand units.&lt;/p&gt;
&lt;h4&gt;%&lt;/h4&gt;
&lt;p&gt;Percentage is a relative unit and works exactly how you would think. The unit sizes a font based on its parent&#39;s font size. So if the parent is 100% and the child is 25% the child element is 25% of its parent&#39;s 100%.&lt;/p&gt;

&lt;p&gt;One area for using a percentage is to style a top level html element like body or html to allow units like em to have easier size calculations. This will set the top level parent element so that converting an em to pixel is as easy as moving the decimal point.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/* ems now are base ten so 1.4em = 14px */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;62.5%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;pt&lt;/h4&gt;
&lt;p&gt;The pt or Point unit is something you have probably seen before in your favorite word processing application. A pt unit refers to physical space on a sheet of paper and is therefore an absolute unit. Because of this they should only ever be used with printer friendly stylesheets.&lt;/p&gt;
&lt;h3&gt;Units to Avoid like the Plague&lt;/h3&gt;
&lt;h4&gt;Keyword&lt;/h4&gt;
&lt;p&gt;I really dislike this unit of measure and generally try to avoid it. Although using a keyword font size ensures that there will be no scaling due to it being a unit of absolute size; they provide little to no fine tuning. This is because there are only 6 different keywords. They range from xx-small to medium and back up to xx-large. Lets move on to something more useful.&lt;/p&gt;
&lt;h3&gt;Units that are Useful&lt;/h3&gt;
&lt;h4&gt;px&lt;/h4&gt;
&lt;p&gt;Pixels are the by far the most accurate and easiest to understand unit of measurement. By setting a font-size in px you are literally instructing the browser to render the font at that exact pixel height. The font will never have a height greater than the pixel value set. This is my bread-and-butter unit.  When you need exact measurements go with px.&lt;/p&gt;
&lt;h4&gt;em&lt;/h4&gt;
&lt;p&gt;According to w3.org an em unit is measured by, &quot;the computed font size of the parent element&quot;. So what does this mean for us? It means that the em unit is dependent upon it&#39;s parent&#39;s font-size and is also another relative unit of measure.&lt;/p&gt;

&lt;p&gt;Since it is dependent upon the parent element the em has a potential to become compounded.  This can lead to some unexpected results. An example of this is if the parent has a font-size of 4em and the child has a font-size of 2em. In actuality the child element will have a font-size of 8em.&lt;/p&gt;

&lt;p&gt;To calculate the size of an em you take the parent and multiply it by the child. However, keep in mind that if we have additional parents that they must be calculated as well. This can make em units somewhat difficult to keep track of as the font size can compound quickly.&lt;/p&gt;
&lt;h3 id=&quot;rem&quot;&gt;A Real Unit of Measure&lt;/h3&gt;
&lt;h4&gt;rem&lt;/h4&gt;
&lt;p&gt;The rem unit or root em is such a sublime solution to the problem of font sizing. The root element of a page is always the html tag. So by defining a % (yes, this would be a good place to use this method) on the html element, you now have control over every single element using the rem unit.&lt;/p&gt;

&lt;p&gt;Back to the previous code example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/* rems now are base ten so 1.4em = 14px */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;62.5%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using this we can now set an h1 tag to 2.8rem and it will render as if it is 28px.&lt;/p&gt;
&lt;h3&gt;Flexible Typography&lt;/h3&gt;
&lt;p&gt;If we are by chance using media queries it is possible to utilize them to typography that will scales with the page size. This is accomplished by redeclaring the font-size percentage for the html element inside a media query. Now all we have to do is change 1 value to affect all font-sizes on multiple devices. This is getting pretty handy now.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1140px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	 * Set the Base Font Size&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	 */&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As with any new unit there is a catch which is browser support. Fortunately all modern browsers support the rem unit. For older non-compliant browsers by using a font-size with a pixel measurement directly before the rem value allows us to specify a default value.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* The default value if rem units aren&amp;#39;t supported */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/* Our fancy new rem unit */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So there you have it a new unit of measuring font-size and a method for creating flexible typography.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2013/articles/should-i-use-px-or-ems-for-css-font-size-neither-use-rem</link>
            <guid>http://joshfrankel.me/blog/2013/articles/should-i-use-px-or-ems-for-css-font-size-neither-use-rem</guid>
            <pubDate>Wed, 30 Jan 2013 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>Responsive Browser Testing with Adobe Edge Inspect</title>
            <description>&lt;p&gt;Testing for mobile devices can be a royal pain in the butt. There are so many different device facets to keep in mind. There are about twenty different brands, a near endless supply of device resolutions, and newer features like retina display that require addtional testing.  Now with the surge of popularity of responsive web design, we now have one more thing to test.  Ready to pull your hair out yet?&lt;/p&gt;&lt;!--more--&gt;

&lt;p&gt;Fortunately, a new time saving way of testing both desktop and mobile devices simultaneously is available. Previously known as Shadow, Adobe has renamed it Edge Inspect.&lt;/p&gt;

&lt;blockquote&gt;&quot;Adobe Edge Inspect - Preview &amp;amp; inspect web designs on devices&quot; - &lt;strong&gt;Adobe.com&lt;/strong&gt;&lt;/blockquote&gt;

&lt;p&gt;Edge Inspect gives developers a much needed way of synchronizing multiple devices in order to test the same webpage. By installing the app and connecting your mobile devices to a wifi network you can control the page of any connected device directly from your browser.&lt;/p&gt;

&lt;p&gt;As an added bonus you can also use your browser&#39;s developer tools to remotely change a device&#39;s html, css, or javascript. No more device specific bugs that are impossible to fix, you can now debug a website without even leaving your browser.  This is awesome for time saving and process automation.&lt;/p&gt;

&lt;p&gt;Edge inspect makes this process so easy. So what are you waiting for? &lt;a href=&quot;http://html.adobe.com/edge/inspect/&quot;&gt;Install it already!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Edge Inspect allows you to connect one additional device to your desktop with the free version or infinite devices with the paid version. I have had no problem just using the free version for the time being.&lt;/p&gt;

&lt;p&gt;Look out for a new blog post in the coming weeks regarding the perfect setup for testing a responsive website.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2013/articles/responsive-browser-testing-with-adobe-edge-inspect</link>
            <guid>http://joshfrankel.me/blog/2013/articles/responsive-browser-testing-with-adobe-edge-inspect</guid>
            <pubDate>Thu, 17 Jan 2013 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>What is Object Oriented Programming?</title>
            <description>&lt;blockquote&gt;&quot;Object-oriented programming (OOP) is a programming paradigm that represents concepts as &quot;objects&quot; that have data fields(attributes that describe the object) and associated procedures known as methods. Objects, which are instances of classes, are used to interact with one another to design applications and computer programs.&quot; &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt; -Wikipedia&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Phew... that was a mouthful. Here is how I would define Object Oriented Programming; A programming pattern that allows specific chunks of functionality (objects) to interact with each other through the use of class functions (methods) and store class specific data (properties).&lt;/p&gt;

&lt;p&gt;When I first started learning about OOP the sheer amount of knowledge and abstractness of the subject was overwhelming to say the least. There is an entire different set of terminology and language to learn while trying to understand the basic theory.&lt;/p&gt;

&lt;h6&gt;&lt;strong&gt;Some Quick Terminology&lt;/strong&gt;&lt;/h6&gt;
&lt;ul&gt;
	&lt;li&gt;Object - &lt;em&gt;Defined within a class file. The basic building block for oop&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;Method - &lt;em&gt;A class specific function; contains necessary functionality&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;Property - &lt;em&gt;A class specific variable&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;Parameter - &lt;em&gt;The variable passed in the method declaration&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I am a kinesthetic learner I find the best way to learn something is to practice it. So lets walk through an example of OOP using a real world system. The following code examples are written in php but the concepts can be used regardless of language.&lt;/p&gt;
&lt;h3&gt;A Car is Object Oriented&lt;/h3&gt;
&lt;p&gt;Think about the following statement, &quot;A car is an object oriented system&quot;. What this means is that you can think of a car as a physical object in space. The object accomplishes a specific purpose and has attributes that are specific to it. Learning object oriented programming in the context of a real-world system is also easier to understand than trying to use an abstract programming example. So from now on whenever I say Car think object.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Class wrapper&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;A Car has Specifications&lt;/h3&gt;
&lt;p&gt;There are about a million different specifications associated with a car. These are based on the type of car, year, and model. If we look at two cars of the same type, year, and model they should... theoretically... be identical.&lt;/p&gt;

&lt;p&gt;For our representation of the Car object lets create the following properties: manufacturer, weight, turned on status, and the current speed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Properties&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manufacturer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Honda&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$isTurnedOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A variable outside the class holding the Car Object&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;A Car Performs Specific Functions&lt;/h3&gt;
&lt;p&gt;Cars perform many different methods of function. We will limit ours to the following: Brake, Accelerate, and Start Ignition. What we have just done is provided the structure for our object. We now know exactly the amount of functionality needed and even the names for the methods we will use. Planning out the design of an Object Oriented system from the beginning is important to help keep code efficient and &lt;a title=&quot;Don&#39;t Repeat Yourself&quot; href=&quot;#&quot;&gt;DRY&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Methods&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manufacturer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Honda&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$isTurnedOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brake&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accelerate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startIgnition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A variable outside the class holding the Car Object&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;strong&gt;Conceptualize:&lt;/strong&gt; A method such as Repair Car Engine would not be suited for our Car Object. A car would not repair itself. This would be performed by a Mechanic (a potential other object).&lt;/blockquote&gt;
&lt;h3&gt;Visibility and Encapsulation&lt;/h3&gt;
&lt;p&gt;You may have noticed the word &quot;public&quot; before the methods. This is what is known as visibility. Visibility refers to how accessible a method or property is to other classes. This is necessary for understanding proper encapsulation.&lt;/p&gt;

&lt;p&gt;There are three types of visibility. Public, Protected, and Private. A &lt;strong&gt;public&lt;/strong&gt; method/property is accessible to the class it originates inside, any child class that extends it, as well as other classes. A &lt;strong&gt;protected&lt;/strong&gt; method/property is visible to only the class where it originates and child classes. A &lt;strong&gt;private&lt;/strong&gt; method/property is visible to only the class it originates in.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;Best Practice:&lt;/strong&gt; When trying to decide visibility for methods and properties you should provide only the bare minimum necessary to execute.&lt;/blockquote&gt;
&lt;p&gt;Encapsulation is the idea of hiding the implementation of your class and exposing its functionality in a limited way. This prevents overriding of functionality and reduces duplicate code.&lt;/p&gt;

&lt;p&gt;In order to properly encapsulate our class we need to set the visibility for each of our properties and methods. Lucky for you it has already been done. Our methods were all listed as public and our properties were labeled private. The properties now are only accessible to the class Car. A common design pattern is to create helper methods called getters and setters.&lt;/p&gt;
&lt;h3&gt;Getters and Setters&lt;/h3&gt;
&lt;p&gt;This is actually a fairly straight forward concept. They literally do exactly what they say and nothing more. A getter method returns a property while a setter method sets it. These allow other methods to access the Car objects private variable for manufacturer.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt; * Getter for Manufacturer&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;**/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getManufacturer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;manufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt; * Setter for Manufacturer&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;**/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setManufacturer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;manufacturer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have introduced a new keyword called $this. $this refers to the current class it is within so in this instance $this will include all the methods and properties for the Car class. By calling $this-&gt;manufacturer inside getManufacturer we return the private variable manufacturer. This will help to differentiate between variables defined within a method (local variables) and a class properties (public, protected, private).&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;Quick Note: &lt;/strong&gt;When calling a property using $this you do not use a second dollar sign. $this-&gt;$manufacturer will generate an error.&lt;/blockquote&gt;
&lt;p&gt;We can now set and get the car&#39;s properties on the fly. Getters and Setters may seem tedious and unnecessary (and they sometimes are in smaller applications) but they should help you to provide access points for other classes while forcing you to organize your code. Here&#39;s a quick simple example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$manufacturer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getManufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Outputs Honda, the default value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setManufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Acura&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$manufacturer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getManufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Outputs Acura&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$manufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Gentleman, Start Your Engines&lt;/h3&gt;
&lt;p&gt;Now that we have some of the basics completed, lets move onto some actual functionality. First lets flesh out the startIgnition method. This method will check the isTurnedOn property to see if it is false (turned off) and if so will change it to True.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startIgnition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;// Check to see if the car is already turned on&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTurnedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;// If the car is off lets turn it on&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTurnedOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The isTurnedOn property now can be checked before running other methods. We can use this to perform a sanity check on the turned on state of the car. A car wouldn&#39;t be able to accelerate or brake if is isn&#39;t turned on, right?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accelerate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;// Check to see if the car is already turned on&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTurnedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;// If the car is turned on then add the parameter value&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// from the private speed variable.&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// We are increasing in speed.&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brake&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;// Check to see if the car is already turned on&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTurnedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;// If the car is turned on then subtract the parameter value&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// from the private speed variable.&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// We are decreasing in speed.&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our accelerate and brake methods now will only run if the car is already turned on. This is the expected result. Both methods can have lots of functionality added to them. I&#39;ll leave these up to you but here are some questions to get you thinking.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Can the car brake and decelerate if the car&#39;s speed is already at zero?&lt;/li&gt;
	&lt;li&gt;Is there a top speed or limit to how fast the car can travel?&lt;/li&gt;
	&lt;li&gt;Does a car take time to accelerate or brake&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;88 MPH&lt;/h3&gt;
&lt;p&gt;The last piece of our Car class will be to output some information that the user can utilize. This will include a new getter method for the car&#39;s speed and an output method to display a string that is user readable.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSpeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// Get the current speed&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outputCurrentSpeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;// Set the local variable (output) to equal a string&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// that contains the returned result from the getSpeed method.&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are traveling at &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; mph&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again by using the $this keyword we refer to the current object. Because the object is a Car object we can access the newly created getSpeed method to return the speed of the car. As displayed above this is concatenated into a string for output. With the functionality of our class completed we can now try it out and see it in action.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Start the Car&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startIgnition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Accelerate to 88 mph&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accelerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This will output &amp;quot;You are traveling at 88 mph&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputCurrentSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Lets stop the car&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;brake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This will output &amp;quot;You are traveling at 0 mph&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputCurrentSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;There you have it. A working OOP class structure. Feel free to build upon this or add other methods.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2013/articles/what-is-object-oriented-programming</link>
            <guid>http://joshfrankel.me/blog/2013/articles/what-is-object-oriented-programming</guid>
            <pubDate>Mon, 14 Jan 2013 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>Create a jQuery Twitter plugin from scratch</title>
            <description>&lt;p&gt;Over the next couple posts in this series I will walk you through building your very own Twitter jQuery plugin from scratch. By the end of this series you will better understand the structure of a jQuery plugin, regular expressions, jQuery optimization, datetime manipulation, and jQuery chaining. Additionally, you will have a working plugin which will grab tweets directly from the twitter api. This is a solution based off something that I have used on a number of sites.&lt;/p&gt;&lt;!--more--&gt;

&lt;p&gt;Alright so first we need to build the file structure for our project. I like keeping my work space clean so here is the directory structure I am using with the starting point for index.html.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.joshmfrankel.com/wp-content/uploads/2012/11/IntroductionHowToBuildAJQueryPluginFromScratch-4.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-444&quot; title=&quot;Introduction HowToBuildAJQueryPluginFromScratch Diagram&quot; alt=&quot;&quot; src=&quot;http://blog.joshmfrankel.com/wp-content/uploads/2012/11/IntroductionHowToBuildAJQueryPluginFromScratch-4.png&quot; width=&quot;476&quot; height=&quot;206&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First you should download the latest version of &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; and place it into the jquery.js file. You should also create style.css and jquery.tweet.js. Index.html is where we will output our tweet listing, style.css is the layout code, and jquery.tweet.js is our plugin.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;css/style.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- CONTENT GOES HERE --&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tweets&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- jQuery code goes at the bottom of the page --&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;js/jquery.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;js/jquery.tweet.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are ready to start fleshing out the basic plugin structure. Our plugin name will be called Tweet. So lets add our jQuery document ready block and our plugin call.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#tweets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow our plugin to be attached onto the id selector tweets from index.html and will come in handy later on.&lt;/p&gt;
&lt;h3&gt;Best Practices&lt;/h3&gt;
&lt;p&gt;There are a few best practices to keep in mind when creating a new plugin.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The plugin name must not interfere with any existing method names&lt;/li&gt;
	&lt;li&gt;The plugin should allow for jQuery chaining (this is THE most powerful aspect of jQuery, so lets try not to break it)&lt;/li&gt;
	&lt;li&gt;It should be highly flexible and allow the user to override default settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have listed the basic plugin structure below with comments. This will cover the first two best practices.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Wrap the plugin in the jquery dollar sign&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This will prevent overriding other methods with&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the same name as the plugin&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Additionally we can use $ to reference jquery&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Map the plugin name as a function in jQuery&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Allow chaining by returning the this keyword&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                     &lt;span class=&quot;c1&quot;&gt;// Output a console message to show the plugin&lt;/span&gt;
                     &lt;span class=&quot;c1&quot;&gt;// is working&lt;/span&gt;
                     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;We have called the tweet plugin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point we technically have a functional, albeit very basic,  jQuery plugin. This will serve as an excellent starting point for future plugin development.&lt;/p&gt;

&lt;p&gt;If you notice I included a console.log(); call which sends data to the browser console.  In Chrome under developer tools it is the last tab and is super helpful for javascript development.  You can output variables, arrays, and even objects in this manner.&lt;/p&gt;

&lt;p&gt;Something you might have seen in another jQuery solution is caching of the this keyword. This provides faster processing as you don&#39;t need to re-query to dom using jquery since it already exists in memory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;One thing to note is that this is not necessary inside a jQuery plugin&lt;ins datetime=&quot;2013-01-31T22:05:56+00:00&quot;&gt;,but is necessary within the return this.each(function() since we are now in the plugin&#39;s immediate scope&lt;/ins&gt;. This is because the plugin is already wrapped in the jQuery object and therefore when you call the keyword this it is already equal to $(this).&lt;/blockquote&gt;
&lt;p&gt;The final element I would like to cover before we start on the meat of the plugin, is including support for default and user overridden settings.&lt;/p&gt;
&lt;h3&gt;Default and User Settings&lt;/h3&gt;
&lt;p&gt;Nearly every single plugin has a way for the user to manipulate its settings.  Its a great way to provide flexibility and control to users so why not. This will be important later on for determining how many tweets we want to grab and what twitter username we grab from. More simply it will allow us not to hard-code data into our plugin.&lt;/p&gt;

&lt;p&gt;To implement default and user settings we first need to include a parameter in the original plugin&#39;s mapping.  Next we create an array called defaults which will hold the basic values for our plugin.  Finally using a little jQuery magic we merge our parameter array (options) into our default array with the $.extend method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Map the plugin name as a function in jQuery&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Pass in the options parameter for overriding defaults&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Set the default plugin values&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;the base username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Use the jQuery method extend to merge&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// the defaults and options arrays&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow the user to change configuration settings by passing in key / value pairs. Try this out by adding console.log(options); where the previous console message was. You should see the output as 5. This is our default value which was merged into the options array.&lt;/p&gt;

&lt;p&gt;Now the real power comes in on index.html where we called our plugin on the id selector. Lets add the following user setting to our plugin call and check the console again.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;css/style.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- CONTENT GOES HERE --&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tweets&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- jQuery code goes at the bottom of the page --&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;js/jquery.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;js/jquery.tweet.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

			&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#tweets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your output should look like the following: Object {username: &quot;the base username&quot;, count: 10}.  Our default value for the username is listed with our user overridden count value.  Pretty slick.&lt;/p&gt;

&lt;p&gt;So that&#39;s it for the basic plugin development. In the next post I will cover the twitter api, regular expressions, and date manipulation.  Continue to next lesson (Coming Soon)&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2012/tutorials/create-a-jquery-twitter-plugin-from-scratch</link>
            <guid>http://joshfrankel.me/blog/2012/tutorials/create-a-jquery-twitter-plugin-from-scratch</guid>
            <pubDate>Wed, 12 Dec 2012 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>5 Methods to style a double line border using only CSS</title>
            <description>&lt;p&gt;Double line letterpress-esque borders are all the rage right now in web development. And why not? They look clean and provide some depth to your site.  So lets dive right in with a few of my favorite techniques for achieving this effect.&lt;/p&gt;&lt;!--more--&gt;

&lt;h3&gt;1. Horizontal rule with a border&lt;/h3&gt;
&lt;p&gt;The first method of building a double border relies on the use of the hr tag. By setting the background color and height, you can change the color of the hr tag. Combine this with adding a border-bottom and you have yourself a double line border. One problem with this approach is that the background color comes after the border-bottom.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.doubleBorder&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d6d6c6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e9e9e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;strong&gt;Pros: &lt;/strong&gt;Uses semantic html element&lt;br /&gt;
&lt;strong&gt;Cons: &lt;/strong&gt;The border order is confusing, horizontal rule must have a height
&lt;/blockquote&gt;
&lt;h3&gt;2. The Border / Outline double border&lt;/h3&gt;
&lt;p&gt;This is by far the easiest method to use. It doesn&#39;t require any bizarre css or html and utilizes css properties properly by their function. Something to keep in mind is that the border property directly surrounds the element, while the outline property will always surround the outside of the element. Because of this the outline property will add extra width and height to the element. Making it larger than you would normally assume. &lt;/p&gt;&lt;p&gt;Unfortunately, outline is not as customizable as border; an outline must always be on all sides of an element while the border can be set to a specific side.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.doubleBorder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e9e9e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e9e9e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;strong&gt;Pros: &lt;/strong&gt;Easiest method to implement!&lt;br /&gt;
&lt;strong&gt;Cons: &lt;/strong&gt;The outline property always surrounds element on all sides with a border, Outline adds additional width and height.&lt;/blockquote&gt;
&lt;h3&gt;3. The Border / Drop-Shadow border&lt;/h3&gt;
&lt;p&gt;This method is very similar to the outline / border method except we use the new CSS3 box-shadow property. Box-Shadow differs from outline because it can accommodate particular sides of the element having a border. Unfortunately, despite being all rad CSS3, box-shadow is not supported in every available browser. So if you need to make this work in IE 8 or less then you should use a different method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip: &lt;/strong&gt;If you want all the sides of an element to have a box shadow increase the spread (fourth pixel value) while leaving vertical and horizontal offsets at zero. This will essentially push the shadow out in all directions.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.doubleBorder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e9e9e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;strong&gt;Pros: &lt;/strong&gt;CSS3 is rad!, Allows for a variety of designs&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; Requires a CSS3 compatible browser (sorry no IE less than 9), Can be tricky to apply to multiple sides of an element&lt;/blockquote&gt;
&lt;h3&gt;4. The ::after pseudo border&lt;/h3&gt;
&lt;p&gt;This is probably one of my favorite techniques even if it isn&#39;t the most elegant.  The trick to this method is that there are two css rules.  One for the initial element (.doubleBorder) and one for the pseudo element ::after. &lt;/p&gt;
&lt;p&gt;::after seems like it should do exactly what it says (style any element that occurs directly after the initial selector).  However for this to work properly there needs to be content to style which is where the content property comes in.  By setting this to a blank value you trick the browser into thinking there is data present which allows you to style the initial tag separately.  In addition to the content property, setting display:block and the height value will render the border.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.doubleBorder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#FAFAFA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.doubleBorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#C1C1BF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;strong&gt;Pros: &lt;/strong&gt; Cool technique that allows for a wide variety of features, Has good browser support&lt;br /&gt;
&lt;strong&gt;Cons: &lt;/strong&gt; Requires more css properties than other methods, Requires blank css property&lt;/blockquote&gt;
&lt;h3&gt;5. The background-image border&lt;/h3&gt;
&lt;p&gt;Ok, ok.  I know what your are thinking.  But this is supposed to only be CSS solutions, right?  Well this last method does use an image to create a border but the real magic happens by using the css repeat-x value in the background attribute.  This allows the image to repeat itself in a horizontal orientation.  The final image that is in use only needs to be 1px wide to render correctly using this method.&lt;/p&gt;
&lt;p&gt;I find that if I am struggling with a particularly difficult design that this method will cover most (if not all) border designs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.doubleBorder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(../images/layout/doubleBorder.png)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;repeat-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;strong&gt;Pros: &lt;/strong&gt;Versatile and useful for difficult designs, Often saves time over other methods&lt;br /&gt;
&lt;strong&gt;Cons: &lt;/strong&gt; Requires an image :-(&lt;/blockquote&gt;
&lt;p&gt;So there you have it, 5 methods for creating a double border.  Have a method not listed here?  Let me know in the comments.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2012/techniques/5-methods-to-style-a-double-line-border-using-only-css</link>
            <guid>http://joshfrankel.me/blog/2012/techniques/5-methods-to-style-a-double-line-border-using-only-css</guid>
            <pubDate>Wed, 28 Nov 2012 00:00:00 -0500</pubDate>
        </item>

        <item>
            <title>Why is Modernizr.load broken for the development version</title>
            <description>&lt;p&gt;The current development version of Modernizr does not contain the yepnope.js bundle.  This is somewhat tricky as there is no error message or notification except in the console debugger.&lt;/p&gt;&lt;!--more--&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Uncaught&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Luckily, there is an easy fix for this.  Just download the &lt;strong&gt;production version&lt;/strong&gt; and make sure to mark the checkbox called Modernizr.load(yepnope).  Fixed!&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2012/articles/why-is-modernizr-load-broken-for-the-development-version</link>
            <guid>http://joshfrankel.me/blog/2012/articles/why-is-modernizr-load-broken-for-the-development-version</guid>
            <pubDate>Thu, 23 Aug 2012 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>How to prevent html textarea resizing using css</title>
            <description>&lt;p&gt;Here is a simple trick I found out by blind luck. I wanted to prevent the textarea tag&#39;s default resizing in Chrome and Firefox. As there seems to be no attribute available for the tag such as resize=&quot;false&quot; (Come on W3C...) I began looking for an alternative. It&#39;s actually quite easy to lock a text area using only CSS.&lt;/p&gt;&lt;!--more--&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;250px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately the !important hack is what locks the size of the textarea. I am still looking for valid css method for sizing a textarea. Anyone else got any idea?

Check out my jsfiddle for a demo! &lt;a href=&quot;http://jsfiddle.net/joshmfrankel/aD6uj/&quot;&gt;Textarea sample&lt;/a&gt;&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2011/how-to/how-to-prevent-html-textarea-resizing-using-css</link>
            <guid>http://joshfrankel.me/blog/2011/how-to/how-to-prevent-html-textarea-resizing-using-css</guid>
            <pubDate>Sun, 16 Oct 2011 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Pure CSS: Dynamically numbered elements</title>
            <description>&lt;p&gt;So this isn&#39;t a &lt;mark title=&quot;Been around since CSS 2.1&quot;&gt;new trick&lt;/mark&gt; by any means, but it sure is handy (Think outlines, book chapters, line numbering...) The more markup you can minimize via CSS the better, in my book.&lt;/p&gt;&lt;!--more--&gt;
&lt;blockquote title=&quot;http://www.w3.org/wiki/CSS/Properties/counter-increment&quot;&gt;Counter-increment CSS Property
&quot;The counter-increment property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer indicates by how much the counter is incremented for every occurrence of the element. The default increment is 1. Zero and negative integers are allowed.&quot; -W3.org&lt;/blockquote&gt;
&lt;p&gt;Fundamentally this property allows web developers to dynamically name html elements per element. I am using this to create line numbers for theme editor app&lt;/p&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;The counter-reset property specifies when the counter should be reset. The identifier in this property is just a matter of preference. A lot of examples I have run across use section or chapter. To use this effectively you need to specify a parent element with the counter-reset property and the child element that should be incremented with the counter-increment property.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;h5&gt;CSS&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;counter-reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;counter-increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;HTML&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Some content goes here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;More content goes here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Yep, more content&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;Output&lt;/h5&gt;
&lt;blockquote&gt;1 Some content goes here

2 More content goes here

3 Yep, more content&lt;/blockquote&gt;
&lt;p&gt;Check out my jsfiddle for a demo! &lt;a href=&quot;http://jsfiddle.net/joshmfrankel/mbM9Z/7/&quot;&gt;Dynamic Numbered CSS&lt;/a&gt;&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2011/techniques/pure-css-dynamically-numbered-elements</link>
            <guid>http://joshfrankel.me/blog/2011/techniques/pure-css-dynamically-numbered-elements</guid>
            <pubDate>Fri, 09 Sep 2011 00:00:00 -0400</pubDate>
        </item>

        <item>
            <title>Firemin: The Firefox memory leak fixer app</title>
            <description>&lt;p&gt;Until recently Firefox has always felt like a double-edged sword to me. The developer&#39;s add-ons have always been a pleasure to use. Firebug, ySlow, PageSpeed, Web Developer are all essential for web design. Unfortunately, my favorite, &lt;a href=&quot;http://getfirebug.com/&quot;&gt;firebug&lt;/a&gt;, has been notorious for turning into a zombie and snacking on my computer&#39;s memory (that no amount of Left 4 Dead can solve!). Leave the browser open a couple hours and viola you have a standards compliant browser that runs slower than IE6.&lt;/p&gt;&lt;!--more--&gt;

&lt;p&gt;I kept using my favorite browser, upgrading to the beta, hoping, praying for a fix. Every update was the promise of a browser that could run indefinitely without performance decrease. And every update the same problem persisted.&lt;/p&gt;

&lt;p&gt;Then I found Firemin. Was it true? Had someone finally fixed the memory issue. I quickly downloaded and ran it. Firefox loaded the same...was it just a another false claim?  Then I checked the task manager and was completely blown away.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rizonesoft.com/2011/firemin/&quot;&gt;Firemin Homepage&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;...let it babysit Firefox. You expected it to be more complicated, we are truly sorry to disappoint you.&quot;&lt;/blockquote&gt;
&lt;p&gt;The former memory leak riddled browser had been transformed into a sleek, efficient, and completely awesome tool. Running at less than 30mbs of memory on average, the browser still refuses to slow down for me. To the hardworking people of Rizonesoft, thank you. You have made this developer&#39;s life and countless others less of a headache.&lt;/p&gt;
</description>
            <link>http://joshfrankel.me/blog/2011/articles/firemin-the-firefox-memory-leak-fix</link>
            <guid>http://joshfrankel.me/blog/2011/articles/firemin-the-firefox-memory-leak-fix</guid>
            <pubDate>Fri, 26 Aug 2011 00:00:00 -0400</pubDate>
        </item>


</channel>
</rss>
